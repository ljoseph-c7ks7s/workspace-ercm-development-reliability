[
    {
        "attrs":{
            "column_conversion":{
                "Command":"str(x).strip()",
                "Depart Time":"'00:'+str(int(x)) if len(str(int(x)))==2 else '00:0' + str(int(x)) if len(str(int(x)))==1 else '0' + str(int(x))[0] + ':' + str(int(x))[1:] if len(str(int(x)))==3 else str(int(x))[0:2] + ':' + str(int(x))[2:]",
                "Land Time":"'00:'+str(int(x)) if len(str(int(x)))==2 else '00:0' + str(int(x)) if len(str(int(x)))==1 else '0' + str(int(x))[0] + ':' + str(int(x))[1:] if len(str(int(x)))==3 else str(int(x))[0:2] + ':' + str(int(x))[2:]",
                "MDS":"str(x).strip()",
                "Serial Number":"('0'+str(x).replace('.0','') if len(str(x).replace('.0',''))==7 else str(x).replace('.0',''))[0:2]+'00'+('0'+str(x).replace('.0','') if len(str(x).replace('.0',''))==7 else str(x).replace('.0',''))[2:10]"
            },
            "date_formatter":{
                "Depart_Date":"%Y%m %d",
                "Land_Date":"%Y%m %d",
                "Update_Date":"%Y%m %d"
            }
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Sortie History data import, first format",
        "id":"sortie_import_new",
        "label":"Sortie Import New",
        "model":"ebbdb8d5-9400-4162-8fba-fc97e34d70c6",
        "position":[
            50,
            320
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Create a staged table in the database.",
        "id":"compiled_sortie_history_data",
        "label":"Compiled Sortie History Data",
        "model":"2ec95720-5068-445c-a15a-0d5c4f99894d",
        "position":[
            360,
            335
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "Corrective Narrative":"x.strip()",
                "Discrepancy Narrative":"x.strip()",
                "Documenter Name":"str(x).strip()",
                "Equipment Designator":"str(x).strip()",
                "Install Location Identifier":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Install Serial Number":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Install Work Unit Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Job Control Number":"x if not x else str(x).strip() if type(x) == unicode else '%09d' % int(float(x))",
                "Maintainer Name":"str(x).strip()",
                "Off Component Part Number":"x if not x else str(x).strip().strip('.0')",
                "On Component Serial Number":"x if not x else str(x).strip('.0')",
                "Remove Location Identifier":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Remove Work Unit Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Serial Number":"x if not x else str(x).strip() if type(x) == unicode else '%010d' % int(float(x))",
                "TCTO Data Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Work Center Event Narrative":"x.strip()",
                "Work Unit Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))"
            },
            "date_formatter":{
                "Transaction_Date":"%b %d, %Y"
            },
            "save_file_name":"File_Name"
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Latest export of C130 REMIS data",
        "id":"remis_data",
        "label":"REMIS Data",
        "model":"6018bebc-4949-4ecc-9a4b-f233ad436242",
        "position":[
            50,
            40
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Compile all previously-uploaded remis data.",
        "id":"compiled_remis_data",
        "label":"Compiled REMIS Data",
        "model":"cd691f7b-48d2-4ef4-976c-4d6386eba8de",
        "position":[
            215,
            20
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "Mission Design Series (e.g. F-16C)":"str(x).strip()",
                "Serial Number":"str(x).strip()"
            },
            "data_start_column":2,
            "data_start_row":5,
            "date_formatter":{
                "Sortie_Date":"%y%j"
            },
            "label_start_row":4,
            "labels":[
                "Mission Design Series (e.g. F-16C)",
                "Serial Number",
                "Mission Number",
                "Sortie Number",
                "Takeoff ICAO Code",
                "Takeoff Date",
                "Takeoff Time",
                "Landing ICAO Code",
                "Landing Date",
                "Landing Time",
                "Hours Flown",
                "Sorties Flown",
                "Total Lndgs",
                "Total Full Stop Lndgs",
                "Sortie Date"
            ]
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Sortie History data import, second format",
        "id":"sortie_import_old",
        "label":"Sortie Import Old",
        "model":"fbdc98ee-c271-4ae8-887e-24c89d42870a",
        "position":[
            50,
            355
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT MDS, Serial_Number,  Mission_Number, Depart_ICAO, Depart_Date, Depart_Time, Land_ICAO, Land_Date, Land_Time, Flying_Hours, Sorties as Sorties_Flown, Total_Landings, Full_Stop_Landings FROM sortie_import_new",
                "SELECT MDS, Serial_Number,  Mission_Number, Depart_ICAO, Depart_Date, Depart_Time, Land_ICAO, Land_Date, Land_Time, Flying_Hours, Sorties_Flown, Total_Landings, Full_Stop_Landings  FROM sortie_import_old"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"sortie_merged",
        "label":"Sortie Merged",
        "model":"a8228da4-e502-4564-b5ef-e246e798cdeb",
        "position":[
            205,
            335
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "level":"all"
            },
            "timeout":60
        },
        "class":"Python",
        "custom_model":true,
        "description":"Apply Work Unit Code edit rules",
        "id":"wuc_edits",
        "label":"WUC Edits",
        "model":"184ad32a-a25b-4e56-bd17-1078f80aae4a",
        "position":[
            250,
            125
        ]
    },
    {
        "class":"TSV",
        "custom_model":true,
        "description":"Pre-Induction Analysis and FSIP excision and edit rules exported from the Non Autofilter C130 MDA SRS Exerpt Rev2D 24Oct18 Word document",
        "id":"rules_list",
        "label":"Rules List",
        "model":"e98cd295-63ad-4ce4-97e7-561c611ac6ce",
        "position":[
            50,
            190
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT wuc_max_count.Work_Unit_Code, max(wucs_w_duplicates_2.WUC_Narrative) WUC_Narrative, wuc_max_count.Count FROM (SELECT Work_Unit_Code, max(Count) Count FROM (SELECT Work_Unit_Code, WUC_Narrative, count(*) Count FROM compiled_remis_data GROUP BY  Work_Unit_Code, WUC_Narrative) wucs_w_duplicates GROUP BY  Work_Unit_Code) wuc_max_count JOIN (SELECT Work_Unit_Code, WUC_Narrative, count(*) Count FROM compiled_remis_data GROUP BY  Work_Unit_Code, WUC_Narrative) wucs_w_duplicates_2 ON wuc_max_count.Work_Unit_Code = wucs_w_duplicates_2.Work_Unit_Code and wuc_max_count.count = wucs_w_duplicates_2.count GROUP BY  Work_Unit_Code, Count ORDER BY  wuc_max_count.Work_Unit_Code"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"WUC to Narrative lookup, using the higher-count Narrative when there are multiple per WUC",
        "id":"work_unit_code_narratives",
        "label":"Work Unit Code Narratives",
        "model":"23ff17e6-6308-4b3e-bfde-84a674a7280f",
        "position":[
            85,
            125
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"clean_wuc_remove_fom",
        "label":"Clean WUC Remove FOM",
        "model":"da37b1b0-e5c4-4683-ae85-a81c3e0d29b2",
        "position":[
            395,
            170
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Identify extra remove and replace actions and drop any ATC not related to a remove and replace (R, P, Q, T, or U).",
        "id":"identify_r2_drop_atc",
        "label":"Identify R2 Drop ATC",
        "model":"410fc5d6-6d2d-4655-8ed1-8f5715a946fb",
        "position":[
            540,
            170
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"part_position_parser",
        "label":"Part Position Parser",
        "model":"f21eadfe-d46a-455a-98eb-b8fc8bc9b395",
        "position":[
            540,
            130
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"split_r_and_multi_pos",
        "label":"Split R and Multi POS",
        "model":"98437406-31ef-429a-a8cd-d8a1b3d11ce0",
        "position":[
            695,
            170
        ]
    },
    {
        "attrs":{
            "db_class_preference":"RMySQL",
            "local_script":"True",
            "script_file":"Sortie_Accumulated_Hours.R"
        },
        "class":"R",
        "custom_model":true,
        "description":"Run an R script.",
        "id":"sortie_accumulated_hours",
        "label":"Sortie Accumulated Hours",
        "model":"debc7c2f-0456-44bc-9f4d-680ba5ea86a4",
        "position":[
            515,
            335
        ]
    },
    {
        "attrs":{
            "timeout":60
        },
        "class":"Python",
        "custom_model":true,
        "description":"Calculate accumulated hours for each maintenance event.",
        "id":"add_event_age",
        "label":"Add Event Age",
        "model":"fe45927a-354a-4a72-aa41-3a609f694151",
        "position":[
            700,
            225
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT raw.Work_Unit_Code, raw.On_Component_Serial_Number, raw.On_Component_Part_Number, raw.Equipment_Designator, raw.Serial_Number, raw.Geographic_Location, raw.Performing_Geographic_Location, raw.Transaction_Date, raw.Start_Time, raw.Work_Center_Code, raw.When_Discovered_Code, raw.How_Malfunction_Code, split_r_and_multi_pos.Action_Taken_Code, raw.Type_Maintenance_Code, age.Current_Operating_Time, split_r_and_multi_pos.Parsed_Component_Position AS Component_Position_Number, raw.Corrective_Narrative, raw.Discrepancy_Narrative, raw.Work_Center_Event_Narrative, last_sortie.Depart_Date, last_sortie.Depart_Time, last_sortie.Flying_Hours AS Flying_Hours_Last_Sortie, last_sortie.Sorties_Flown AS Sorties_Flown_Last_Sortie, last_sortie.Total_Landings AS Total_Landings_Last_Sortie, last_sortie.Full_Stop_Landings AS Full_Stop_Landings_Last_Sortie, split_r_and_multi_pos.Primary_Key_Index, split_r_and_multi_pos.On_Work_Order_Key, split_r_and_multi_pos.On_Maint_Action_Key, split_r_and_multi_pos.Work_Center_Event_Identifier, split_r_and_multi_pos.Sequence_Number, split_r_and_multi_pos.Work_Order_Number FROM compiled_remis_data raw JOIN split_r_and_multi_pos ON raw.On_Work_Order_Key = split_r_and_multi_pos.On_Work_Order_Key AND raw.On_Maint_Action_Key = split_r_and_multi_pos.On_Maint_Action_Key AND raw.Work_Center_Event_Identifier = split_r_and_multi_pos.Work_Center_Event_Identifier AND raw.Sequence_Number = split_r_and_multi_pos.Sequence_Number AND raw.Work_Order_Number = split_r_and_multi_pos.Work_Order_Number JOIN add_event_age age ON raw.On_Work_Order_Key = age.On_Work_Order_Key AND raw.On_Maint_Action_Key = age.On_Maint_Action_Key AND raw.Work_Center_Event_Identifier = age.Work_Center_Event_Identifier AND raw.Sequence_Number = age.Sequence_Number AND raw.Work_Order_Number = age.Work_Order_Number LEFT JOIN last_sortie ON raw.Serial_Number = last_sortie.Serial_Number AND raw.Equipment_Designator = last_sortie.MDS"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"joined_data",
        "label":"Joined Data",
        "model":"a2acd8e8-0f7e-4f81-84c8-f90d430d60cc",
        "position":[
            1025,
            130
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Create a staged table in the database.",
        "id":"stage_data_for_tow",
        "label":"Stage Data for TOW",
        "model":"1aed829d-8e00-42ce-8fcf-9a674474389e",
        "position":[
            1185,
            130
        ]
    },
    {
        "attrs":{
            "component":"eRCM_TOW",
            "component_config":{
                "source_table":"stage_data_for_tow"
            },
            "iter_key":"Work_Unit_Code",
            "iter_src":"stage_data_for_tow"
        },
        "class":"Looper",
        "custom_model":true,
        "description":"Run another component ('child component') multiple times, for each available value of the selected field",
        "id":"calculate_tow",
        "label":"Calculate TOW",
        "model":"c6b9d182-d4a9-46f6-b5b0-4333051ed6cc",
        "position":[
            1345,
            130
        ]
    },
    {
        "attrs":{
            "component_config":{
                "age_reset_event":[
                    {
                        "criteria":[
                            {
                                "field":"REMOVAL_Action_Taken_Code",
                                "is":"P"
                            }
                        ],
                        "name":"REPAIR",
                        "require_all":false
                    }
                ],
                "consequence":[],
                "interval_end_column":"REMOVAL_Transaction_Date",
                "interval_start_column":"INSTALL_Transaction_Date",
                "location_group":[],
                "object":"Component_Position_Number",
                "object_class":"Work_Unit_Code",
                "object_type":"Work_Unit_Code",
                "operating_time":"TOW",
                "parent_type":"Equipment_Designator",
                "special_repair_event":[],
                "suspension":[
                    {
                        "criteria":[
                            {
                                "field":"REMOVAL_Action_Taken_Code",
                                "is":"T"
                            }
                        ],
                        "name":"CANNIBALIZATION",
                        "require_all":false
                    },
                    {
                        "criteria":[
                            {
                                "field":"REMOVAL_Transaction_Date",
                                "is":null
                            }
                        ],
                        "name":"INSTALLED",
                        "require_all":false
                    },
                    {
                        "criteria":[
                            {
                                "field":"spans_unknown_removal",
                                "is":"1"
                            }
                        ],
                        "name":"SPANS_UNKNOWN_REMOVAL",
                        "require_all":false
                    },
                    {
                        "criteria":[
                            {
                                "field":"REMOVAL_Cause",
                                "is":"Isolation"
                            }
                        ],
                        "name":"ISOLATION",
                        "require_all":false
                    }
                ]
            },
            "parameter_info":{
                "Removed_Last_10_Years":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"rem_last_10",
                    "removal_rate":1
                },
                "Removed_Last_5_Years":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"rem_last_5",
                    "removal_rate":1
                },
                "completed_repairs":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"repairs",
                    "removal_rate":0
                },
                "location":{
                    "consequence":1,
                    "do_not_combine":0,
                    "nrts":1,
                    "plot_name":"loc",
                    "removal_rate":0
                },
                "object_class":{
                    "consequence":1,
                    "do_not_combine":1,
                    "nrts":1,
                    "plot_name":"class",
                    "removal_rate":1
                },
                "object_type":{
                    "consequence":1,
                    "do_not_combine":0,
                    "nrts":1,
                    "plot_name":"type",
                    "removal_rate":0
                },
                "parent_object_type":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"nha_type",
                    "removal_rate":1
                }
            }
        },
        "class":"Reliability_Interval_Creator",
        "description":"Create reliability intervals by specifying table entries",
        "id":"calculate_intervals",
        "label":"Calculate Intervals",
        "model":"reliability_interval_model",
        "position":[
            1225,
            225
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT On_Maint_Action_Key, Work_Center_Event_Identifier, Sequence_Number, Off_Maint_Action_Key, Work_Order_Number, Depot_Maint_Action_Key FROM remis_data WHERE work_unit_code not REGEXP '^0'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Excision Rule 2: Delete all entries with WUCs that begin with 0. (Because we are performing a root cause analysis for each MX event, we are not interested in capturing the inspections themselves, only the resulting discrepancies captured during the inspection) (Run first to speed up processing)",
        "id":"remove_general_support_wucs",
        "label":"Remove General Support WUCs",
        "model":"a49ad5eb-5ada-4b73-8eb4-75945890f3b6",
        "position":[
            215,
            70
        ]
    },
    {
        "attrs":{
            "additional_r_parameters":{
                "make_plots":false,
                "min_interval_time":0.1,
                "plot_dir":"./plots/",
                "specific_param_combos":[
                    {
                        "override_dnc":null,
                        "parameter_values":{
                            "parent_object_type":[
                                "C130H",
                                "C130J"
                            ]
                        }
                    }
                ]
            },
            "script_file":"reliability_distribution_creator.R"
        },
        "class":"Reliability_Distribution_Creator",
        "description":"Fit reliability distributions",
        "id":"calculate_distributions",
        "label":"Calculate Distributions",
        "model":"reliability_distribution_model",
        "position":[
            1375,
            225
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT sortie_accumulated_hours.* FROM sortie_accumulated_hours JOIN (SELECT Serial_Number, max(Flying_Hours) Flying_Hours FROM sortie_accumulated_hours GROUP BY Serial_Number ) max_sortie ON sortie_accumulated_hours.serial_number = max_sortie.serial_number AND sortie_accumulated_hours.Flying_Hours = max_sortie.Flying_Hours"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Select the latest sortie for each aircraft.",
        "id":"last_sortie",
        "label":"Last Sortie",
        "model":"77f11401-f6f5-4268-b547-f7a1b1aea338",
        "position":[
            665,
            335
        ]
    },
    {
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"what_data",
        "label":"what data",
        "model":"504ed54c-5d03-4c82-bbbe-8d3ccaf99e74",
        "position":[
            410,
            5
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "BOBJ Transactions for 01-2018 thru 01-2019":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "PART NUMBER":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "WUC":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))"
            },
            "sheets":[
                "WUC list with Part #"
            ]
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file with the ~30 priority WUCs for C130.",
        "id":"ercm_wuc_list_raw",
        "label":"eRCM WUC List Raw",
        "model":"335fda3d-ca15-44d9-9ac1-83b6a57f79ca",
        "position":[
            10,
            225
        ]
    },
    {
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"candidate_wucs_raw_removals",
        "label":"Candidate WUCs Raw Removals",
        "model":"6d78991e-09b9-41f4-8569-8381db89d78b",
        "position":[
            555,
            25
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"export_candidate_wuc_removals",
        "label":"Export Candidate WUC Removals",
        "position":[
            700,
            25
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"hmal_codes",
        "label":"HMAL Codes",
        "model":"6f7a7abe-a6bf-440c-bf23-ff5b327fa71d",
        "position":[
            50,
            525
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"at_codes",
        "label":"AT Codes",
        "model":"2871c63c-0c64-4f75-bbf3-55ea10996d23",
        "position":[
            50,
            420
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"tm_codes",
        "label":"TM Codes",
        "model":"fa84505e-1d6c-4838-8e32-4b3f48d705ab",
        "position":[
            50,
            455
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"wd_codes",
        "label":"WD Codes",
        "model":"615506ca-c708-4b27-b2b9-e56cb29c01ed",
        "position":[
            50,
            490
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT File_Name, remis.On_Maint_Action_Key, remis.Work_Center_Event_Identifier, remis.Sequence_Number, remis.Off_Maint_Action_Key, remis.Work_Order_Number, remis.Depot_Maint_Action_Key, Serial_Number, Job_Control_Number, remis.Work_Unit_Code, Transaction_Date, Geographic_Location, remis.Current_Operating_Time, Action_Taken_Code, at.description, How_Malfunction_Code, How_Malfunction_Class_Ind, hmal.description, Type_Maintenance_Code, tm.description, When_Discovered_Code, wd.description, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM (SELECT DISTINCT work_unit_code FROM ercm_wuc_list) ercm_wuc_list JOIN compiled_remis_data remis ON remis.Work_Unit_Code = ercm_wuc_list.Work_Unit_Code JOIN at_codes at ON at.code = remis.Action_Taken_Code JOIN hmal_codes hmal ON hmal.code = remis.How_Malfunction_Code JOIN wd_codes wd ON wd.code = remis.When_Discovered_Code JOIN tm_codes tm ON tm.code = remis.Type_Maintenance_Code"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Include codes and narratives to assist with labeling excercises.",
        "id":"to_label",
        "label":"To Label",
        "model":"f98a2964-117b-458d-bf6a-ed80a1eca2f6",
        "position":[
            230,
            420
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "EQUIPMENT DESIGNATOR":"str(x).strip()"
            },
            "data_start_row":4,
            "date_formatter":{
                "Effective_Date":"%e%b%Y",
                "Pub_Date":"%e%b%Y",
                "Start_Date":"%e%b%Y",
                "Stop_Date":"%e%b%Y"
            },
            "label_start_row":3,
            "labels":[
                "ACTION CODE",
                "EQUIPMENT DESIGNATOR",
                "WORK UNIT CODE",
                "BLOCK NUMBER",
                "START DATE",
                "TYPE EQUIPMENT",
                "SERIALLY TRACKED IND",
                "FAILURE LIMIT",
                "REPLACEMENT IND",
                "NRTS IND",
                "USAGE FACTOR",
                "ACTION LIMIT",
                "QTY PER APPLIC",
                "SPECIAL INVENTORY",
                "CAT OF FAILURE IND",
                "INSP REQUIREMENT",
                "PUB DATE",
                "STOP DATE",
                "ORIGINAL WUC",
                "CASCADE TO NEW WUC",
                "DESCRIPTION",
                "CASCADED BY",
                "EFFECTIVE DATE",
                "MESSAGES"
            ]
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import report EFM 1640, which includes quantity-per-aircraft for each MDS and work unit code.",
        "id":"qpa",
        "label":"QPA",
        "model":"bcafda99-f8e4-470d-92db-debc7bd06288",
        "position":[
            50,
            260
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"ercm_wuc_list",
        "label":"eRCM WUC List",
        "model":"47ba97d1-5510-4765-b228-60d68d13be86",
        "position":[
            150,
            225
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"export_to_label",
        "label":"Export to Label",
        "position":[
            370,
            440
        ]
    },
    {
        "attrs":{
            "labels":{
                "Action":[
                    "O",
                    "R",
                    "P",
                    "Q",
                    "T",
                    "U",
                    "IU",
                    "CC"
                ],
                "Position":[
                    "1",
                    "2",
                    "3",
                    "4",
                    "0",
                    "1,2",
                    "1,3",
                    "1,4",
                    "2,3",
                    "2,4",
                    "3,4",
                    "1,2,3",
                    "1,2,4",
                    "1,3,4",
                    "2,3,4"
                ],
                "RC":[
                    "Leaking",
                    "Worn",
                    "Isolation",
                    "Unknown",
                    "Light",
                    "Metal",
                    "Pressure",
                    ""
                ]
            }
        },
        "class":"EventLabelGenerator",
        "custom_model":true,
        "description":"Save sets of labels to validate uploaded hand-labeled events against",
        "id":"labels_import",
        "label":"Labels Import",
        "model":"907521ac-c001-4a25-8627-84b67f6354df",
        "position":[
            370,
            405
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT id, Work_Unit_Code, Serial_Number, Equipment_Designator, Component_Position_Number, Work_Order_Number, Sequence_Number, Work_Center_Event_Identifier, On_Maint_Action_Key, Off_Maint_Action_Key, Depot_Maint_Action_Key, INSTALL_Transaction_Date, INSTALL_TSN, INSTALL_Geographic_Location, INSTALL_Action_Taken_Code, Corrective_Narrative, Discrepancy_Narrative, Work_Center_Event_Narrative, if(unk_removal_date, unk_removal_date, REMOVAL_Transaction_Date) REMOVAL_Transaction_Date, if(unk_removal_date, unk_removal_tsn, REMOVAL_TSN) REMOVAL_TSN, if(unk_removal_date, NULL, REMOVAL_Geographic_Location) REMOVAL_Geographic_Location, if(unk_removal_date, NULL, REMOVAL_Action_Taken_Code) REMOVAL_Action_Taken_Code, if(unk_removal_date, NULL, REMOVAL_How_Malfunction_Code) REMOVAL_How_Malfunction_Code, if(unk_removal_date, NULL, REMOVAL_When_Discovered_Code) REMOVAL_When_Discovered_Code, if(unk_removal_date, NULL, REMOVAL_Cause) REMOVAL_Cause, spans_unknown_install, spans_unknown_removal, ROUND(IF(unk_removal_date, unk_removal_tsn - INSTALL_TSN, TOW), 2) TOW, DATEDIFF(CURDATE(), COALESCE(if(unk_removal_date, unk_removal_date, REMOVAL_Transaction_Date), CURDATE())) / 365.24 <= 5 removed_last_5_years, DATEDIFF(CURDATE(), COALESCE(if(unk_removal_date, unk_removal_date, REMOVAL_Transaction_Date), CURDATE())) / 365.24 <= 10 removed_last_10_years FROM remove_unk_position_number WHERE INSTALL_action_taken_code != 'IU'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"(1) Remove left-censored intervals for which we do not know the total time on test (those that were begun with the install of a used part), (2) update intervals that cross 'lost' removals of parts with unknown station to suspensions at the unknown-position removal dates, (3) add two time-based covariates: removed in the last 5 years, and removed in the last 10 years (both options include installed parts).",
        "id":"remove_left_censored_add_covariates",
        "label":"Remove Left Censored Add Covariates",
        "model":"3131696e-9d7a-4f75-b716-80dd73f2705f",
        "position":[
            1070,
            225
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Tabulate current part ages for each position in each aircraft seen in sortie data and whether an unknown-position removal or install occurred since the part was installed (lost position).",
        "id":"current_part_ages",
        "label":"Current Part Ages",
        "model":"df9503ad-e1b1-41ea-897f-a30c923e57ad",
        "position":[
            1675,
            130
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Drop interval data without known positions, and identify other intervals that span removals and installs without known positions.",
        "id":"remove_unk_position_number",
        "label":"Remove Unk Position Number",
        "model":"4cc3322a-9684-4715-81a6-0bde8f0d289a",
        "position":[
            1505,
            130
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "cdf_threshold":0.95,
                "hours_threshold":8500
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Add CDF values for every position's currently-installed parts and predict probability of removal 30/60/90 days out.",
        "id":"predictive_twins",
        "label":"Predictive Twins",
        "model":"78c9203b-b6d1-4447-8263-d8629b328d2a",
        "position":[
            1825,
            180
        ]
    },
    {
        "attrs":{
            "additional_r_parameters":{
                "alpha":0.05
            },
            "db_class_preference":"RMySQL",
            "local_script":"True",
            "script_file":"single_weibull_quantile_table.R"
        },
        "class":"R",
        "custom_model":true,
        "description":"Estimate confidence intervals for regular quantiles of the most-generic Weibull distribution using all data.  Default is 95% confidence intervals, but you can adjust alpha in additional_r_parameters.",
        "id":"single_weibull_quantiles",
        "label":"Single Weibull Quantiles",
        "model":"8d41847f-1f54-4311-ad92-a2ff406d1d3f",
        "position":[
            1375,
            265
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"export_predictions",
        "label":"Export Predictions",
        "position":[
            1840,
            240
        ]
    }
]