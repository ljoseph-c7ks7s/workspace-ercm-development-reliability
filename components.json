[
    {
        "attrs":{
            "column_conversion":{
                "Command":"str(x).strip()",
                "Depart Time":"'00:'+str(int(x)) if len(str(int(x)))==2 else '00:0' + str(int(x)) if len(str(int(x)))==1 else '0' + str(int(x))[0] + ':' + str(int(x))[1:] if len(str(int(x)))==3 else str(int(x))[0:2] + ':' + str(int(x))[2:]",
                "Land Time":"'00:'+str(int(x)) if len(str(int(x)))==2 else '00:0' + str(int(x)) if len(str(int(x)))==1 else '0' + str(int(x))[0] + ':' + str(int(x))[1:] if len(str(int(x)))==3 else str(int(x))[0:2] + ':' + str(int(x))[2:]",
                "MDS":"str(x).strip()",
                "Serial Number":"('0'+str(x).replace('.0','') if len(str(x).replace('.0',''))==7 else str(x).replace('.0',''))[0:2]+'00'+('0'+str(x).replace('.0','') if len(str(x).replace('.0',''))==7 else str(x).replace('.0',''))[2:10]"
            },
            "date_formatter":{
                "Depart_Date":"%Y%m %d",
                "Land_Date":"%Y%m %d",
                "Update_Date":"%Y%m %d"
            }
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Sortie History data import, first format",
        "id":"sortie_import_new",
        "label":"Sortie Import New",
        "model":"ebbdb8d5-9400-4162-8fba-fc97e34d70c6",
        "position":[
            50,
            275
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Create a staged table in the database.",
        "id":"compiled_sortie_history_data",
        "label":"Compiled Sortie History Data",
        "model":"2ec95720-5068-445c-a15a-0d5c4f99894d",
        "position":[
            360,
            290
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "Corrective Narrative":"x.strip()",
                "Discrepancy Narrative":"x.strip()",
                "Documenter Name":"str(x).strip()",
                "Equipment Designator":"str(x).strip()",
                "Install Location Identifier":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Install Serial Number":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Install Work Unit Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Job Control Number":"x if not x else str(x).strip() if type(x) == unicode else '%09d' % int(float(x))",
                "Maintainer Name":"str(x).strip()",
                "Off Component Part Number":"x if not x else str(x).strip().strip('.0')",
                "On Component Serial Number":"x if not x else str(x).strip('.0')",
                "Remove Location Identifier":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Remove Work Unit Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Serial Number":"x if not x else str(x).strip() if type(x) == unicode else '%010d' % int(float(x))",
                "TCTO Data Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "Work Center Event Narrative":"x.strip()",
                "Work Unit Code":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))"
            },
            "date_formatter":{
                "Transaction_Date":"%b %d, %Y"
            }
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Latest export of C130 REMIS data",
        "id":"c130_remis_data",
        "label":"C130 REMIS Data",
        "model":"6018bebc-4949-4ecc-9a4b-f233ad436242",
        "position":[
            50,
            40
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Create a staged table in the database.",
        "id":"compiled_c130_remis_data",
        "label":"Compiled C130 REMIS Data",
        "model":"1bcf09ae-93eb-426a-9bfd-a8a3c8fcfadd",
        "position":[
            215,
            20
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "Mission Design Series (e.g. F-16C)":"str(x).strip()",
                "Serial Number":"str(x).strip()"
            },
            "data_start_column":2,
            "data_start_row":5,
            "date_formatter":{
                "Sortie_Date":"%y%j"
            },
            "label_start_row":4,
            "labels":[
                "Mission Design Series (e.g. F-16C)",
                "Serial Number",
                "Mission Number",
                "Sortie Number",
                "Takeoff ICAO Code",
                "Takeoff Date",
                "Takeoff Time",
                "Landing ICAO Code",
                "Landing Date",
                "Landing Time",
                "Hours Flown",
                "Sorties Flown",
                "Total Lndgs",
                "Total Full Stop Lndgs",
                "Sortie Date"
            ]
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Sortie History data import, second format",
        "id":"sortie_import_old",
        "label":"Sortie Import Old",
        "model":"fbdc98ee-c271-4ae8-887e-24c89d42870a",
        "position":[
            50,
            315
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT MDS, Serial_Number,  Mission_Number, Depart_ICAO, Depart_Date, Depart_Time, Land_ICAO, Land_Date, Land_Time, Flying_Hours, Sorties as Sorties_Flown, Total_Landings, Full_Stop_Landings FROM sortie_import_new",
                "SELECT MDS, Serial_Number,  Mission_Number, Depart_ICAO, Depart_Date, Depart_Time, Land_ICAO, Land_Date, Land_Time, Flying_Hours, Sorties_Flown, Total_Landings, Full_Stop_Landings  FROM sortie_import_old"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"sortie_merged",
        "label":"Sortie Merged",
        "model":"a8228da4-e502-4564-b5ef-e246e798cdeb",
        "position":[
            205,
            290
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "level":"all"
            },
            "timeout":60
        },
        "class":"Python",
        "custom_model":true,
        "description":"Apply Work Unit Code edit rules",
        "id":"wuc_edits",
        "label":"WUC Edits",
        "model":"184ad32a-a25b-4e56-bd17-1078f80aae4a",
        "position":[
            245,
            170
        ]
    },
    {
        "class":"TSV",
        "custom_model":true,
        "description":"Pre-Induction Analysis and FSIP excision and edit rules exported from the Non Autofilter C130 MDA SRS Exerpt Rev2D 24Oct18 Word document",
        "id":"rules_list",
        "label":"Rules List",
        "model":"e98cd295-63ad-4ce4-97e7-561c611ac6ce",
        "position":[
            50,
            235
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT wuc_max_count.Work_Unit_Code, max(wucs_w_duplicates_2.WUC_Narrative) WUC_Narrative, wuc_max_count.Count FROM (SELECT Work_Unit_Code, max(Count) Count FROM (SELECT Work_Unit_Code, WUC_Narrative, count(*) Count FROM compiled_c130_remis_data GROUP BY  Work_Unit_Code, WUC_Narrative) wucs_w_duplicates GROUP BY  Work_Unit_Code) wuc_max_count JOIN (SELECT Work_Unit_Code, WUC_Narrative, count(*) Count FROM compiled_c130_remis_data GROUP BY  Work_Unit_Code, WUC_Narrative) wucs_w_duplicates_2 ON wuc_max_count.Work_Unit_Code = wucs_w_duplicates_2.Work_Unit_Code and wuc_max_count.count = wucs_w_duplicates_2.count GROUP BY  Work_Unit_Code, Count ORDER BY  wuc_max_count.Work_Unit_Code"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"WUC to Narrative lookup, using the higher-count Narrative when there are multiple per WUC",
        "id":"work_unit_code_narratives",
        "label":"Work Unit Code Narratives",
        "model":"23ff17e6-6308-4b3e-bfde-84a674a7280f",
        "position":[
            85,
            125
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"clean_wuc_remove_fom",
        "label":"Clean WUC Remove FOM",
        "model":"da37b1b0-e5c4-4683-ae85-a81c3e0d29b2",
        "position":[
            395,
            170
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Identify extra remove and replace actions and drop any ATC not related to a remove and replace (R, P, Q, T, or U).",
        "id":"identify_r2_drop_atc",
        "label":"Identify R2 Drop ATC",
        "model":"410fc5d6-6d2d-4655-8ed1-8f5715a946fb",
        "position":[
            540,
            170
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"part_position_parser",
        "label":"Part Position Parser",
        "model":"f21eadfe-d46a-455a-98eb-b8fc8bc9b395",
        "position":[
            540,
            130
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"split_r_and_multi_pos",
        "label":"Split R and Multi POS",
        "model":"98437406-31ef-429a-a8cd-d8a1b3d11ce0",
        "position":[
            695,
            170
        ]
    },
    {
        "attrs":{
            "db_class_preference":"RMySQL",
            "local_script":"True",
            "script_file":"Sortie_Accumulated_Hours.R"
        },
        "class":"R",
        "custom_model":true,
        "description":"Run an R script.",
        "id":"sortie_accumulated_hours",
        "label":"Sortie Accumulated Hours",
        "model":"debc7c2f-0456-44bc-9f4d-680ba5ea86a4",
        "position":[
            510,
            290
        ]
    },
    {
        "attrs":{
            "timeout":60
        },
        "class":"Python",
        "custom_model":true,
        "description":"Calculate accumulated hours for each maintenance event.",
        "id":"add_event_age",
        "label":"Add Event Age",
        "model":"fe45927a-354a-4a72-aa41-3a609f694151",
        "position":[
            700,
            225
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT raw.Work_Unit_Code, raw.On_Component_Serial_Number, raw.On_Component_Part_Number, raw.Equipment_Designator, raw.Serial_Number, raw.Geographic_Location, raw.Performing_Geographic_Location, raw.Transaction_Date, raw.Start_Time, raw.Work_Center_Code, raw.When_Discovered_Code, raw.How_Malfunction_Code, split_r_and_multi_pos.Action_Taken_Code, raw.Type_Maintenance_Code, age.Current_Operating_Time, split_r_and_multi_pos.Parsed_Component_Position AS Component_Position_Number, raw.Corrective_Narrative, raw.Discrepancy_Narrative, raw.Work_Center_Event_Narrative, last_sortie.Depart_Date, last_sortie.Depart_Time, last_sortie.Flying_Hours AS Flying_Hours_Last_Sortie, last_sortie.Sorties_Flown AS Sorties_Flown_Last_Sortie, last_sortie.Total_Landings AS Total_Landings_Last_Sortie, last_sortie.Full_Stop_Landings AS Full_Stop_Landings_Last_Sortie, split_r_and_multi_pos.Primary_Key_Index, split_r_and_multi_pos.On_Work_Order_Key, split_r_and_multi_pos.On_Maint_Action_Key, split_r_and_multi_pos.Work_Center_Event_Identifier, split_r_and_multi_pos.Sequence_Number, split_r_and_multi_pos.Work_Order_Number FROM ercm.compiled_c130_remis_data raw JOIN ercm.split_r_and_multi_pos ON raw.On_Work_Order_Key = split_r_and_multi_pos.On_Work_Order_Key AND raw.On_Maint_Action_Key = split_r_and_multi_pos.On_Maint_Action_Key AND raw.Work_Center_Event_Identifier = split_r_and_multi_pos.Work_Center_Event_Identifier AND raw.Sequence_Number = split_r_and_multi_pos.Sequence_Number AND raw.Work_Order_Number = split_r_and_multi_pos.Work_Order_Number JOIN ercm.add_event_age age ON raw.On_Work_Order_Key = age.On_Work_Order_Key AND raw.On_Maint_Action_Key = age.On_Maint_Action_Key AND raw.Work_Center_Event_Identifier = age.Work_Center_Event_Identifier AND raw.Sequence_Number = age.Sequence_Number AND raw.Work_Order_Number = age.Work_Order_Number LEFT JOIN ercm.last_sortie ON raw.Serial_Number = last_sortie.Serial_Number AND raw.Equipment_Designator = last_sortie.MDS"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"joined_data",
        "label":"Joined Data",
        "model":"a2acd8e8-0f7e-4f81-84c8-f90d430d60cc",
        "position":[
            1025,
            130
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Create a staged table in the database.",
        "id":"stage_data_for_tow",
        "label":"Stage Data for TOW",
        "model":"fd105d3a-f26e-4f88-b967-987f8789f28e",
        "position":[
            1185,
            130
        ]
    },
    {
        "attrs":{
            "component":"eRCM_TOW",
            "component_config":{
                "source_table":"stage_data_for_tow"
            },
            "iter_key":"Work_Unit_Code",
            "iter_src":"stage_data_for_tow"
        },
        "class":"Looper",
        "custom_model":true,
        "description":"Run another component ('child component') multiple times, for each available value of the selected field",
        "id":"calculate_tow",
        "label":"Calculate TOW",
        "model":"c6b9d182-d4a9-46f6-b5b0-4333051ed6cc",
        "position":[
            1345,
            130
        ]
    },
    {
        "class":"Reliability_Interval_Creator",
        "description":"Create reliability intervals by specifying table entries",
        "id":"calculate_intervals",
        "label":"Calculate Intervals",
        "model":"reliability_interval_model",
        "position":[
            1095,
            225
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT On_Work_Order_Key, On_Maint_Action_Key, Work_Center_Event_Identifier, Sequence_Number, Work_Order_Number FROM c130_remis_data WHERE work_unit_code not REGEXP '^0'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Excision Rule 2: Delete all entries with WUCs that begin with 0. (Because we are performing a root cause analysis for each MX event, we are not interested in capturing the inspections themselves, only the resulting discrepancies captured during the inspection) (Run first to speed up processing)",
        "id":"remove_general_support_wucs",
        "label":"Remove General Support WUCs",
        "model":"a49ad5eb-5ada-4b73-8eb4-75945890f3b6",
        "position":[
            215,
            70
        ]
    },
    {
        "attrs":{
            "additional_r_parameters":{
                "make_plots":false,
                "min_interval_time":1,
                "plot_dir":"./plots/",
                "specific_param_combos":[
                    {
                        "override_dnc":null,
                        "parameter_values":{
                            "parent_object_type":[
                                "C130H",
                                "C130J"
                            ]
                        }
                    }
                ]
            },
            "script_file":"reliability_distribution_creator.R"
        },
        "class":"Reliability_Distribution_Creator",
        "description":"Fit reliability distributions",
        "id":"calculate_distributions",
        "label":"Calculate Distributions",
        "model":"reliability_distribution_model",
        "position":[
            1255,
            225
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT * FROM calculate_tow WHERE INSTALL_action_taken_code != 'U'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"remove_left_censored",
        "label":"Remove Left Censored",
        "model":"5a058a8e-8665-499a-9c67-6881efaecc18",
        "position":[
            1495,
            130
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT sortie_accumulated_hours.* FROM sortie_accumulated_hours JOIN (SELECT Serial_Number, max(Flying_Hours) Flying_Hours FROM sortie_accumulated_hours GROUP BY Serial_Number ) max_sortie ON sortie_accumulated_hours.serial_number = max_sortie.serial_number AND sortie_accumulated_hours.Flying_Hours = max_sortie.Flying_Hours"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Select the latest sortie for each aircraft.",
        "id":"last_sortie",
        "label":"Last Sortie",
        "model":"77f11401-f6f5-4268-b547-f7a1b1aea338",
        "position":[
            670,
            290
        ]
    },
    {
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"what_data",
        "label":"what data",
        "model":"504ed54c-5d03-4c82-bbbe-8d3ccaf99e74",
        "position":[
            410,
            5
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"ercm_wuc_list",
        "label":"eRCM WUC List",
        "model":"335fda3d-ca15-44d9-9ac1-83b6a57f79ca",
        "position":[
            50,
            190
        ]
    },
    {
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"candidate_wucs_raw_removals",
        "label":"Candidate WUCs Raw Removals",
        "model":"6d78991e-09b9-41f4-8569-8381db89d78b",
        "position":[
            555,
            25
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"export_candidate_wuc_removals",
        "label":"Export Candidate WUC Removals",
        "position":[
            700,
            25
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"hmal_codes",
        "label":"HMAL Codes",
        "model":"6f7a7abe-a6bf-440c-bf23-ff5b327fa71d",
        "position":[
            50,
            385
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"at_codes",
        "label":"AT Codes",
        "model":"2871c63c-0c64-4f75-bbf3-55ea10996d23",
        "position":[
            50,
            420
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"tm_codes",
        "label":"TM Codes",
        "model":"fa84505e-1d6c-4838-8e32-4b3f48d705ab",
        "position":[
            50,
            455
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"wd_codes",
        "label":"WD Codes",
        "model":"615506ca-c708-4b27-b2b9-e56cb29c01ed",
        "position":[
            50,
            490
        ]
    }
]