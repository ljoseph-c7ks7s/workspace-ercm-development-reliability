[
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Create a staged table in the database.",
        "id":"compiled_sortie_history_data",
        "label":"Compiled Sortie History Data",
        "model":"232440b7-070e-45d4-86d0-d2365f765f29",
        "position":[
            360,
            360
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "drop_empty_SN":true,
                "drop_other_MDS":true
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Add a 3-column primary key. Sort remaining duplicates so they're deleted by the primary key.",
        "id":"remis_data",
        "label":"REMIS Data",
        "model":"6018bebc-4949-4ecc-9a4b-f233ad436242",
        "position":[
            70,
            55
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Compile all previously-uploaded remis data.",
        "id":"compiled_remis_data",
        "label":"Compiled REMIS Data",
        "model":"113a6728-c63f-40f7-b0cf-185886f5e550",
        "position":[
            215,
            20
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "Command":"str(x).strip()",
                "Depart Time":"'00:'+str(int(x)) if len(str(int(x)))==2 else '00:0' + str(int(x)) if len(str(int(x)))==1 else '0' + str(int(x))[0] + ':' + str(int(x))[1:] if len(str(int(x)))==3 else str(int(x))[0:2] + ':' + str(int(x))[2:]",
                "Land Time":"'00:'+str(int(x)) if len(str(int(x)))==2 else '00:0' + str(int(x)) if len(str(int(x)))==1 else '0' + str(int(x))[0] + ':' + str(int(x))[1:] if len(str(int(x)))==3 else str(int(x))[0:2] + ':' + str(int(x))[2:]",
                "MDS":"str(x).strip()",
                "Serial Number":"('0'+str(x).replace('.0','') if len(str(x).replace('.0',''))==7 else str(x).replace('.0',''))[0:2]+'00'+('0'+str(x).replace('.0','') if len(str(x).replace('.0',''))==7 else str(x).replace('.0',''))[2:10]"
            },
            "date_formatter":{
                "Depart_Date":"%Y%m %d",
                "Land_Date":"%Y%m %d",
                "Update_Date":"%Y%m %d"
            }
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Sortie History data import, first format",
        "id":"sortie_import_new",
        "label":"Sortie Import New",
        "model":"ebbdb8d5-9400-4162-8fba-fc97e34d70c6",
        "position":[
            50,
            320
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "Mission Design Series (e.g. F-16C)":"str(x).strip()",
                "Serial Number":"str(x).strip()"
            },
            "data_start_column":2,
            "data_start_row":5,
            "date_formatter":{
                "Sortie_Date":"%y%j"
            },
            "label_start_row":4,
            "labels":[
                "Mission Design Series (e.g. F-16C)",
                "Serial Number",
                "Mission Number",
                "Sortie Number",
                "Takeoff ICAO Code",
                "Takeoff Date",
                "Takeoff Time",
                "Landing ICAO Code",
                "Landing Date",
                "Landing Time",
                "Hours Flown",
                "Sorties Flown",
                "Total Lndgs",
                "Total Full Stop Lndgs",
                "Sortie Date"
            ]
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Sortie History data import, second format",
        "id":"sortie_import_old",
        "label":"Sortie Import Old",
        "model":"fbdc98ee-c271-4ae8-887e-24c89d42870a",
        "position":[
            50,
            415
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT MDS, Serial_Number,  Mission_Number, Depart_ICAO, Depart_Date, Depart_Time, Land_ICAO, Land_Date, Land_Time, Flying_Hours, Sorties as Sorties_Flown, Total_Landings, Full_Stop_Landings FROM sortie_import_new",
                "SELECT MDS, Serial_Number,  Mission_Number, Depart_ICAO, Depart_Date, Depart_Time, Land_ICAO, Land_Date, Land_Time, Flying_Hours, Sorties_Flown, Total_Landings, Full_Stop_Landings  FROM sortie_import_old"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"sortie_merged",
        "label":"Sortie Merged",
        "model":"a8228da4-e502-4564-b5ef-e246e798cdeb",
        "position":[
            195,
            360
        ]
    },
    {
        "attrs":{
            "delimiter":"tab"
        },
        "class":"CSV",
        "custom_model":true,
        "description":"Pre-Induction Analysis and FSIP excision and edit rules exported from the Non Autofilter C130 MDA SRS Exerpt Rev2D 24Oct18 Word document",
        "id":"rules_list",
        "label":"Rules List",
        "model":"e98cd295-63ad-4ce4-97e7-561c611ac6ce",
        "position":[
            10,
            215
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"part_position_parser",
        "label":"Part Position Parser",
        "model":"f21eadfe-d46a-455a-98eb-b8fc8bc9b395",
        "position":[
            775,
            15
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"split_r_and_multi_pos",
        "label":"Split R and Multi POS",
        "model":"98437406-31ef-429a-a8cd-d8a1b3d11ce0",
        "position":[
            910,
            80
        ]
    },
    {
        "attrs":{
            "db_class_preference":"RMySQL",
            "local_script":"True",
            "script_file":"Sortie_Accumulated_Hours.R"
        },
        "class":"R",
        "custom_model":true,
        "description":"Run an R script.",
        "id":"sortie_accumulated_hours",
        "label":"Sortie Accumulated Hours",
        "model":"debc7c2f-0456-44bc-9f4d-680ba5ea86a4",
        "position":[
            515,
            275
        ]
    },
    {
        "attrs":{
            "timeout":60
        },
        "class":"Python",
        "custom_model":true,
        "description":"Calculate accumulated hours for each maintenance event.",
        "id":"add_event_age",
        "label":"Add Event Age",
        "model":"fe45927a-354a-4a72-aa41-3a609f694151",
        "position":[
            790,
            150
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT wucs.Work_Unit_Code, TRIM(raw.Equipment_Designator) AS Equipment_Designator, raw.Serial_Number, raw.Geographic_Location, raw.Performing_Geographic_Location, raw.Transaction_Date, raw.Start_Time, raw.Work_Center_Code, raw.When_Discovered_Code, raw.How_Malfunction_Code, split_r_and_multi_pos.Action_Taken_Code, NULL Removal_Cause, raw.Type_Maintenance_Code, age.Current_Operating_Time, split_r_and_multi_pos.Parsed_Component_Position AS Component_Position_Number, raw.Corrective_Narrative, raw.Discrepancy_Narrative, raw.Work_Center_Event_Narrative, last_sortie.Depart_Date, last_sortie.Depart_Time, last_sortie.Flying_Hours AS Flying_Hours_Last_Sortie, last_sortie.Sorties_Flown AS Sorties_Flown_Last_Sortie, last_sortie.Total_Landings AS Total_Landings_Last_Sortie, last_sortie.Full_Stop_Landings AS Full_Stop_Landings_Last_Sortie, split_r_and_multi_pos.Work_Order_Number, split_r_and_multi_pos.Work_Center_Event_Identifier, split_r_and_multi_pos.Sequence_Number, split_r_and_multi_pos.Primary_Key_Index FROM compiled_remis_data raw JOIN wuc_of_interest wucs ON raw.Work_Center_Event_Identifier = wucs.Work_Center_Event_Identifier AND raw.Sequence_Number = wucs.Sequence_Number AND raw.Work_Order_Number = wucs.Work_Order_Number JOIN split_r_and_multi_pos ON raw.Work_Center_Event_Identifier = split_r_and_multi_pos.Work_Center_Event_Identifier AND raw.Sequence_Number = split_r_and_multi_pos.Sequence_Number AND raw.Work_Order_Number = split_r_and_multi_pos.Work_Order_Number JOIN add_event_age age ON raw.Work_Center_Event_Identifier = age.Work_Center_Event_Identifier AND raw.Sequence_Number = age.Sequence_Number AND raw.Work_Order_Number = age.Work_Order_Number LEFT JOIN last_sortie ON raw.Serial_Number = last_sortie.Serial_Number AND raw.Equipment_Designator = last_sortie.MDS WHERE split_r_and_multi_pos.Action_Taken_Code != 'O'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"joined_data",
        "label":"Joined Data",
        "model":"a2acd8e8-0f7e-4f81-84c8-f90d430d60cc",
        "position":[
            1040,
            130
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Create a staged table in the database.",
        "id":"stage_data_for_tow",
        "label":"Stage Data for TOW",
        "model":"6737a245-f763-43bd-b312-78ab16615cda",
        "position":[
            1185,
            130
        ]
    },
    {
        "attrs":{
            "component":"eRCM_TOW",
            "component_config":{
                "source_table":"stage_data_for_tow"
            },
            "iter_key":"Work_Unit_Code",
            "iter_src":"stage_data_for_tow"
        },
        "class":"Looper",
        "custom_model":true,
        "description":"Run another component ('child component') multiple times, for each available value of the selected field",
        "id":"calculate_tow",
        "label":"Calculate TOW",
        "model":"c6b9d182-d4a9-46f6-b5b0-4333051ed6cc",
        "position":[
            1345,
            130
        ]
    },
    {
        "attrs":{
            "component_config":{
                "age_reset_event":[],
                "consequence":[],
                "interval_end_column":"REMOVAL_Transaction_Date",
                "interval_start_column":"INSTALL_Transaction_Date",
                "location_group":[],
                "object":"Component_Position_Number",
                "object_class":"Work_Unit_Code",
                "object_type":"Work_Unit_Code",
                "operating_time":"TOW",
                "parent_type":"Equipment_Designator",
                "special_repair_event":[],
                "suspension":[
                    {
                        "criteria":[
                            {
                                "field":"REMOVAL_Action_Taken_Code",
                                "is":"T"
                            }
                        ],
                        "name":"CANNIBALIZATION",
                        "require_all":false
                    },
                    {
                        "criteria":[
                            {
                                "field":"REMOVAL_Transaction_Date",
                                "is":null
                            }
                        ],
                        "name":"INSTALLED",
                        "require_all":false
                    },
                    {
                        "criteria":[
                            {
                                "field":"spans_unknown_removal",
                                "is":"1"
                            }
                        ],
                        "name":"SPANS_UNKNOWN_REMOVAL",
                        "require_all":false
                    },
                    {
                        "criteria":[
                            {
                                "field":"REMOVAL_Cause",
                                "is":"Isolation"
                            }
                        ],
                        "name":"ISOLATION",
                        "require_all":false
                    }
                ]
            },
            "parameter_info":{
                "Removed_Last_10_Years":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"rem_last_10",
                    "removal_rate":1
                },
                "Removed_Last_5_Years":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"rem_last_5",
                    "removal_rate":1
                },
                "completed_repairs":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"repairs",
                    "removal_rate":0
                },
                "location":{
                    "consequence":1,
                    "do_not_combine":0,
                    "nrts":1,
                    "plot_name":"loc",
                    "removal_rate":0
                },
                "object_class":{
                    "consequence":1,
                    "do_not_combine":1,
                    "nrts":1,
                    "plot_name":"class",
                    "removal_rate":1
                },
                "object_type":{
                    "consequence":1,
                    "do_not_combine":0,
                    "nrts":1,
                    "plot_name":"type",
                    "removal_rate":0
                },
                "parent_object_type":{
                    "consequence":0,
                    "do_not_combine":0,
                    "nrts":0,
                    "plot_name":"nha_type",
                    "removal_rate":1
                }
            }
        },
        "class":"Reliability_Interval_Creator",
        "description":"Create reliability intervals by specifying table entries",
        "id":"calculate_intervals",
        "label":"Calculate Intervals",
        "model":"reliability_interval_model",
        "position":[
            1105,
            225
        ]
    },
    {
        "attrs":{
            "additional_r_parameters":{
                "make_plots":false,
                "min_interval_time":0.1,
                "plot_dir":"./plots/",
                "specific_param_combos":[]
            },
            "script_file":"reliability_distribution_creator.R"
        },
        "class":"Reliability_Distribution_Creator",
        "description":"Fit reliability distributions",
        "id":"calculate_distributions",
        "label":"Calculate Distributions",
        "model":"reliability_distribution_model",
        "position":[
            1255,
            225
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT sortie_accumulated_hours.* FROM sortie_accumulated_hours JOIN (SELECT Serial_Number, max(Flying_Hours) Flying_Hours FROM sortie_accumulated_hours GROUP BY Serial_Number ) max_sortie ON sortie_accumulated_hours.serial_number = max_sortie.serial_number AND sortie_accumulated_hours.Flying_Hours = max_sortie.Flying_Hours WHERE MDS IN ('C130J','C130H')"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Select the latest sortie for each aircraft.",
        "id":"last_sortie",
        "label":"Last Sortie",
        "model":"77f11401-f6f5-4268-b547-f7a1b1aea338",
        "position":[
            790,
            185
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT equipment_designator mds, year(transaction_date) year, count(*) count FROM compiled_remis_data GROUP BY equipment_designator, year(transaction_date)"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"what_data",
        "label":"what data",
        "model":"504ed54c-5d03-4c82-bbbe-8d3ccaf99e74",
        "position":[
            50,
            640
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "BOBJ Transactions for 01-2018 thru 01-2019":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "PART NUMBER":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))",
                "WUC":"x if not x else str(x).strip() if type(x) == unicode else int(float(x))"
            },
            "sheets":[
                "WUC list with Multiple Part #"
            ]
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file with the ~30 priority WUCs for C130.",
        "id":"ercm_wuc_list_raw",
        "label":"eRCM WUC List Raw",
        "model":"335fda3d-ca15-44d9-9ac1-83b6a57f79ca",
        "position":[
            10,
            250
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "HMAL":"str(x).replace('.0','')"
            }
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"hmal_codes",
        "label":"HMAL Codes",
        "model":"6f7a7abe-a6bf-440c-bf23-ff5b327fa71d",
        "position":[
            50,
            565
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "AT":"str(x).replace('.0','')"
            }
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"at_codes",
        "label":"AT Codes",
        "model":"2871c63c-0c64-4f75-bbf3-55ea10996d23",
        "position":[
            50,
            475
        ]
    },
    {
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"tm_codes",
        "label":"TM Codes",
        "model":"fa84505e-1d6c-4838-8e32-4b3f48d705ab",
        "position":[
            50,
            505
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "WD":"str(x).replace('.0','')"
            }
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file.",
        "id":"wd_codes",
        "label":"WD Codes",
        "model":"615506ca-c708-4b27-b2b9-e56cb29c01ed",
        "position":[
            50,
            535
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT File_Name, remis.On_Maint_Action_Key, remis.Work_Center_Event_Identifier, remis.Sequence_Number, remis.Off_Maint_Action_Key, remis.Work_Order_Number, remis.Depot_Maint_Action_Key, Equipment_Designator, Serial_Number, Job_Control_Number, remis.Work_Unit_Code, Transaction_Date, Geographic_Location, remis.Current_Operating_Time, Action_Taken_Code, at.description, How_Malfunction_Code, How_Malfunction_Class_Ind, hmal.description, Type_Maintenance_Code, tm.description, When_Discovered_Code, wd.description, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM (SELECT DISTINCT work_unit_code FROM ercm_wuc_list) ercm_wuc_list JOIN compiled_remis_data remis ON remis.Work_Unit_Code = ercm_wuc_list.Work_Unit_Code JOIN at_codes at ON at.code = remis.Action_Taken_Code JOIN hmal_codes hmal ON hmal.code = remis.How_Malfunction_Code JOIN wd_codes wd ON wd.code = remis.When_Discovered_Code JOIN tm_codes tm ON tm.code = remis.Type_Maintenance_Code WHERE TRIM(Equipment_Designator) IN ('C130H','C130J')",
                "SELECT NULL , NULL , remis.Work_Center_Event_Identifier, remis.Sequence_Number, NULL , NULL , NULL , Equipment_Designator, Serial_Number, Job_Control_Number, remis.Work_Unit_Code, Transaction_Date, Geographic_Location, remis.Current_Operating_Time, Action_Taken_Code, at.description, How_Malfunction_Code, How_Malfunction_Class_Ind, hmal.description, Type_Maintenance_Code, tm.description, When_Discovered_Code, wd.description, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Action_Narrative FROM (SELECT DISTINCT work_unit_code FROM ercm_wuc_list) ercm_wuc_list JOIN prp4127 remis ON remis.Work_Unit_Code = ercm_wuc_list.Work_Unit_Code JOIN at_codes at ON at.code = remis.Action_Taken_Code JOIN hmal_codes hmal ON hmal.code = remis.How_Malfunction_Code JOIN wd_codes wd ON wd.code = remis.When_Discovered_Code JOIN tm_codes tm ON tm.code = remis.Type_Maintenance_Code WHERE TRIM(Equipment_Designator) IN ('C130H','C130J')"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Include codes and narratives to assist with labeling excercises.  Minimal key information for the 4127 report.",
        "id":"to_label",
        "label":"To Label",
        "model":"f98a2964-117b-458d-bf6a-ed80a1eca2f6",
        "position":[
            230,
            405
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "EQUIPMENT DESIGNATOR":"str(x).strip()"
            },
            "data_start_row":4,
            "date_formatter":{
                "Effective_Date":"%e%b%Y",
                "Pub_Date":"%e%b%Y",
                "Start_Date":"%e%b%Y",
                "Stop_Date":"%e%b%Y"
            },
            "label_start_row":3,
            "labels":[
                "ACTION CODE",
                "EQUIPMENT DESIGNATOR",
                "WORK UNIT CODE",
                "BLOCK NUMBER",
                "START DATE",
                "TYPE EQUIPMENT",
                "SERIALLY TRACKED IND",
                "FAILURE LIMIT",
                "REPLACEMENT IND",
                "NRTS IND",
                "USAGE FACTOR",
                "ACTION LIMIT",
                "QTY PER APPLIC",
                "SPECIAL INVENTORY",
                "CAT OF FAILURE IND",
                "INSP REQUIREMENT",
                "PUB DATE",
                "STOP DATE",
                "ORIGINAL WUC",
                "CASCADE TO NEW WUC",
                "DESCRIPTION",
                "CASCADED BY",
                "EFFECTIVE DATE",
                "MESSAGES"
            ]
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import report EFM 1640, which includes quantity-per-aircraft and names for each MDS and work unit code. We are not using these QPAs - they are not all correct.",
        "id":"efm_1640",
        "label":"EFM 1640",
        "model":"bcafda99-f8e4-470d-92db-debc7bd06288",
        "position":[
            50,
            600
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"ercm_wuc_list",
        "label":"eRCM WUC List",
        "model":"47ba97d1-5510-4765-b228-60d68d13be86",
        "position":[
            145,
            250
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"export_to_label",
        "label":"Export to Label",
        "position":[
            370,
            405
        ]
    },
    {
        "attrs":{
            "labels":{
                "Action":[
                    "O",
                    "R",
                    "P",
                    "Q",
                    "T",
                    "U",
                    "IU",
                    "CC",
                    "SW"
                ],
                "Position":[
                    "",
                    "0",
                    "2",
                    "13",
                    "10",
                    "11",
                    "6",
                    "8",
                    "5",
                    "1",
                    "3",
                    "7",
                    "9",
                    "12",
                    "4",
                    "12,13",
                    "13,9",
                    "0,3",
                    "13,4",
                    "10,13",
                    "13,2",
                    "13,8",
                    "12,9",
                    "2,8",
                    "13,6",
                    "5,8",
                    "11,13",
                    "1,13",
                    "13,3",
                    "13,5",
                    "13,7",
                    "2,5",
                    "10,2",
                    "1,10",
                    "12,8",
                    "2,9",
                    "11,4",
                    "5,7",
                    "10,9",
                    "11,12",
                    "1,5",
                    "6,7",
                    "8,9",
                    "10,3",
                    "14",
                    "1,2,3,4",
                    "0,1,2,3,4",
                    "2 TANK PROBE AND COMP PROBE",
                    "LH EXT SPR IND",
                    "4 TANK PROBES",
                    "RH EXT PROBE",
                    "3 TANK FUEL PROBES",
                    "RH AUX PROBES",
                    "1 PROBE,2 TANK",
                    "1 TANK,4 PROBE",
                    "LH AUX BOUNDARY HARNESS",
                    "LH AUX WIRE HARNESS",
                    "2 FUEL QTY SYS",
                    "LH EXT WIRING COMP PROBE TO TANK CONNECT",
                    "LH AUX WIRING PRESSURE BREAK TO TANK",
                    "COMP PROBE",
                    "4 TANK,FUEL QTY HARNESS",
                    "ALL HARNESS,RH EXT PROBES",
                    "FLH DECK PRESSURE BREAK C/P",
                    "RH EXT FUEL INDICATOR",
                    "RH AUX QTY HARNESS",
                    "4 TANK INDICATORS",
                    "RH AUX FMC",
                    "3 FUEL QTY GAGE",
                    "RH EXT FUEL QUANTITY HARNESS",
                    "LH AUX QUANTITY HARNESS",
                    "LH EXT QUANTITY HARNESS",
                    "RH EXT QUANTITY INDICATOR",
                    "4 TANK SPR FUEL QUANTITY INDIICATO",
                    "FUEL QUANTITY INDICATOR",
                    "RH AUX COMP PROBE",
                    "FUEL PRESS XMTR",
                    "LH AUX TANK PROBES AND HARNESS",
                    "\\",
                    "4 TANK PROBES AND HARNESS",
                    "LH AUX TANK FLCV",
                    "2 TANK WIRE HARNESS",
                    "3 CROSSFEED SWITCH",
                    "RH EXT TANK PIP CONNECTOR",
                    "RH AUX FUEL QUANTITY HARNESS",
                    "1-4 TANK,LH & RH  AUX,LH & RH EXT. FUEL QTY HARNESS",
                    "RH AUX TANK HARNESS",
                    "LH AUX TANK FUEL QUANTITY INDICATOR",
                    "3 TANK FUEL QUANTITY INDICATOR",
                    "4 TANK  HARNESS",
                    "LH EXT TAIL CONE HARNESS",
                    "2 ENGINE SECONDARY FUEL PUMP PRESSURE SWITCH",
                    "4 TANK FUEL QUANTITY INDICATOR",
                    "4 TANK COMPENSATOR PROBE",
                    "COPILOTS LIGHTING CONTROL PANEL",
                    "TOTAL FUEL QUANTITIY INDICATOR",
                    "LH EXT HARNESS",
                    "4 TANK FUEL QUANTITY HARNESS",
                    "LH EXT UNITS AND WIRING",
                    "2 FUEL QUANTITY HARNESS",
                    "LIGHT ASSY",
                    "LH EXT FUEL QUANTITY HARNESS",
                    "RH AUX FUEY QUANTITY HARNESS",
                    "3 TANK COMPENSATOR PROBE",
                    "4 TANK 2 PROBE",
                    "1 FUEL QUANTITY INDICATOR",
                    "SPR FUEL PANEL",
                    "FLH DECK FUEL QUANTITY INDICATOR",
                    "3 PUMP LIGHT ASSEMBLY",
                    "1 FUEL QUANTITY HARNESS",
                    "3 FUEL QUANTITY INDICATOR",
                    "2 TANK PROBE 2",
                    "FUEL TOTALIZER",
                    "4 TANK HARNESS",
                    "RH AUX PROBES X4",
                    "RH EXT FUEL QUANTITY TEST SWITCH",
                    "RH EXT FUEL QUANTITY INDICATOR",
                    "FUEL TOTALIZER RELAY",
                    "RH AUX QUANTITY HARNESS",
                    "LH AUX FUEL QUANTITY INDICATOR",
                    "3 TANK PROBE",
                    "RH AUX QUANTITY INDICATOR TEST SWITCH",
                    "3 FUEL QUANTITY INDICATOR HARNESS",
                    "LH AUX FUEL QUANTITY HARNESS,PROBES",
                    "LH AUX HARNESS,PROBES",
                    "3 FUEL QUANTITY INDICATORS,4",
                    "LH AUX COMPENSATOR PROBE",
                    "2 FUEL QUANTITY INDICATOR,3",
                    "2 TANK 2 PROBE",
                    "B/C",
                    "2,3,4",
                    "RH AUX",
                    "LH AUX",
                    "LH EXT",
                    "RH EXT",
                    "LH EXT,RH EXT",
                    "LH AUX,LH EXT",
                    "RTP",
                    "CURSOR CONTROL",
                    "CENTER",
                    "1A12",
                    "1A03,1A04",
                    "1A03,1A11,1A18,41A02",
                    "1A06",
                    "1A01",
                    "1A07",
                    "1A02",
                    "1A01,1A02",
                    "1A02,1A18",
                    "LEFT EXTERNAL TANK",
                    "1A18",
                    "1A12,1A13,1A19",
                    "1A05",
                    "0,2",
                    "1A19",
                    "0,LH EXT",
                    "1,3",
                    "3,4",
                    "1,4",
                    "1,2",
                    "2,3",
                    "2,4",
                    "APU",
                    "4,TVIB",
                    "2,TVIB",
                    "3,TVIB",
                    "3,CVIB",
                    "1,TVIB",
                    "0,4",
                    "0,1",
                    "2B",
                    "3B,4B",
                    "2A",
                    "4A,4B",
                    "4A",
                    "3A",
                    "3B",
                    "1B",
                    "1A",
                    "4B",
                    "2A,2B",
                    "1A,4A",
                    "3A,3B",
                    "1A,2A",
                    "3A,4A",
                    "1A,1B",
                    "0,2A",
                    "COPILOT",
                    "PILOT",
                    "COPILOT,NAV",
                    "NAV",
                    "COPILOT_LOWER",
                    "PILOT_UPPER",
                    "PILOT_LOWER",
                    "COPILOT_UPPER",
                    "COPILOT_LOWER,COPILOT_UPPER,PILOT_LOWER,PILOT_UPPER",
                    "FWD_CARGO",
                    "AUG_CREW",
                    "AFT_CARGO",
                    "AFT_CENTER_CONSOLE"
                ],
                "Removal_Cause":[
                    "",
                    "MOD",
                    "FOM",
                    "DEPOT",
                    "MX",
                    "TCTO",
                    "CANN",
                    "TROUBLESHOOTING",
                    "E",
                    "TRAINING",
                    "B/C",
                    "TROUBLESHOOT",
                    "FILTER",
                    "PUMP",
                    "VALVE",
                    "FILTER, VALVE",
                    "FITLER",
                    "FITER",
                    "FLTER",
                    "SWAPPED",
                    "REFURB",
                    "TCTO 904",
                    "TCTO 1C-130J-904",
                    "FOD",
                    "CLEAN",
                    "NVIS MOD",
                    "TCTO 1933",
                    "VERSION UPGRADE",
                    "TCTO 1C-130-1885",
                    "TCTO 1885",
                    "MODIFICATION",
                    "CONTAMINATION"
                ]
            }
        },
        "class":"EventLabelGenerator",
        "custom_model":true,
        "description":"Save sets of labels to validate uploaded hand-labeled events against",
        "id":"labels_import",
        "label":"Labels Import",
        "model":"7731a24d-a481-420c-8b49-26b0aa6132c6",
        "position":[
            370,
            445
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT id, Work_Unit_Code, Serial_Number, Equipment_Designator, Component_Position_Number, Work_Order_Number, Work_Center_Event_Identifier, Sequence_Number, INSTALL_Transaction_Date, INSTALL_TSN, INSTALL_Geographic_Location, INSTALL_Action_Taken_Code, Corrective_Narrative, Discrepancy_Narrative, Work_Center_Event_Narrative, IFNULL(unk_removal_date, REMOVAL_Transaction_Date) REMOVAL_Transaction_Date, IFNULL(unk_removal_tsn, REMOVAL_TSN) REMOVAL_TSN, IF(ISNULL(unk_removal_date), REMOVAL_Geographic_Location, NULL) REMOVAL_Geographic_Location, IF(ISNULL(unk_removal_date), REMOVAL_Action_Taken_Code, NULL) REMOVAL_Action_Taken_Code, IF(ISNULL(unk_removal_date), REMOVAL_How_Malfunction_Code, NULL) REMOVAL_How_Malfunction_Code, IF(ISNULL(unk_removal_date), REMOVAL_When_Discovered_Code, NULL) REMOVAL_When_Discovered_Code, IF(ISNULL(unk_removal_date), REMOVAL_Cause, NULL) REMOVAL_Cause, spans_unknown_install, spans_unknown_removal, ROUND(IF(ISNULL(unk_removal_date), TOW, unk_removal_tsn - INSTALL_TSN), 2) TOW, DATEDIFF(start_forecast_date, COALESCE(IF(ISNULL(unk_removal_date), REMOVAL_Transaction_Date, unk_removal_date), start_forecast_date)) / 365.24 <= 5 removed_last_5_years, DATEDIFF(start_forecast_date, COALESCE(IF(ISNULL(unk_removal_date), REMOVAL_Transaction_Date, unk_removal_date), start_forecast_date)) / 365.24 <= 10 removed_last_10_years FROM remove_unk_position_number, (SELECT DATE_FORMAT(DATE_ADD(MAX(REMOVAL_Transaction_Date), INTERVAL 1 MONTH), '%Y-%m-01') start_forecast_date FROM calculate_tow) sfd WHERE INSTALL_action_taken_code != 'IU'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"(1) Remove left-censored intervals for which we do not know the total time on test (those that were begun with the install of a used part), (2) update intervals that cross 'lost' removals of parts with unknown station to suspensions at the unknown-position removal dates, (3) add two time-based covariates: removed in the last 5 years, and removed in the last 10 years (both options include installed parts).",
        "id":"remove_disqualified_add_covariates",
        "label":"Remove Disqualified Add Covariates",
        "model":"3131696e-9d7a-4f75-b716-80dd73f2705f",
        "position":[
            955,
            225
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "wuc_filter":[
                    "41322",
                    "82LC0"
                ]
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Tabulate current part ages for each position in each aircraft seen in sortie data and whether an unknown-position removal or install occurred since the part was installed (lost position).",
        "id":"current_part_ages",
        "label":"Current Part Ages",
        "model":"df9503ad-e1b1-41ea-897f-a30c923e57ad",
        "position":[
            1670,
            130
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Drop interval data without known positions, and identify other intervals that span removals and installs without known positions.",
        "id":"remove_unk_position_number",
        "label":"Remove Unk Position Number",
        "model":"4cc3322a-9684-4715-81a6-0bde8f0d289a",
        "position":[
            1505,
            130
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "thresholds":{
                    "41322":{
                        "cdf_threshold":0.95,
                        "hours_threshold":6000
                    },
                    "82LC0":{
                        "cdf_threshold":0.95,
                        "hours_threshold":6000
                    }
                }
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Add CDF values for every position's currently-installed parts and predict probability of unscheduled removal and threshold removal 1/2/3/4/5/6 months out.",
        "id":"predictive_twins",
        "label":"Predictive Twins",
        "model":"78c9203b-b6d1-4447-8263-d8629b328d2a",
        "position":[
            1820,
            180
        ]
    },
    {
        "attrs":{
            "additional_r_parameters":{
                "alpha":0.05,
                "min_interval_time":0.1
            },
            "db_class_preference":"RMySQL",
            "local_script":"True",
            "script_file":"weibull_quantile_table.R"
        },
        "class":"R",
        "custom_model":true,
        "description":"Estimate confidence intervals for regular quantiles of the most-generic Weibull distribution using all data.  Default is 95% confidence intervals, but you can adjust alpha in additional_r_parameters.",
        "id":"weibull_quantile_cis",
        "label":"Weibull Quantile CIs",
        "model":"8d41847f-1f54-4311-ad92-a2ff406d1d3f",
        "position":[
            1395,
            260
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"export_predictions",
        "label":"Export Predictions",
        "position":[
            1855,
            85
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT remis.Work_Order_Number, remis.Work_Center_Event_Identifier, remis.Sequence_Number, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM compiled_remis_data remis JOIN wuc_of_interest wucs ON wucs.Work_Order_Number = remis.Work_Order_Number AND wucs.Work_Center_Event_Identifier = remis.Work_Center_Event_Identifier AND wucs.Sequence_Number = remis.Sequence_Number WHERE remis.Serial_Number IS NOT NULL AND TRIM(remis.Equipment_Designator) IN ('C130J','C130H') AND wucs.Work_Unit_Code = '41322'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Filter by WUC and Year, exclude NULL Serial Number, get narratives to for labeling.",
        "id":"remis_filter_41322",
        "label":"REMIS Filter 41322",
        "model":"ae7269f9-da60-4a5e-85ff-8531b250fe56",
        "position":[
            380,
            180
        ]
    },
    {
        "attrs":{
            "column_mapping":{
                "AFTO Form 350 Tag Number":"AFTO_Form_350_Tag_Number",
                "Action Taken Code":"Action_Taken_Code",
                "Activity Identifier":"Activity_Identifier",
                "Block Number":"Block_Number",
                "Command":"Command",
                "Component Part Number":"Component_Part_Number",
                "Component Position Number":"Component_Position_Number",
                "Component Serial Number":"Component_Serial_Number",
                "Corrective Action Narrative":"Corrective_Narrative",
                "Crew Size":"Crew_Size",
                "Current Operating Time":"Current_Operating_Time",
                "Discrepancy Narrative":"Discrepancy_Narrative",
                "Documenter Name":"Documenter_Name",
                "Equipment Designator":"Equipment_Designator",
                "Federal Supply Classification":"Federal_Supply_Classification",
                "Geographic Location":"Geographic_Location",
                "How Malfunction Class Ind":"How_Malfunction_Class_Ind",
                "How Malfunction Code":"How_Malfunction_Code",
                "Installd EI Comp Serial Number":"Installed_EI_Comp_Serial_Number",
                "Installed CAGE Code":"Installed_CAGE_Code",
                "Installed Curr Operating Time":"Installed_Current_Operating_Time",
                "Installed EI Comp Part Number":"Installed_EI_Comp_Part_Number",
                "Installed EI Equip Designator":"Installed_EI_Equip_Designator",
                "Installed EI SRD":"Installed_EI_SRD",
                "Installed EI Serial Number":"Installed_EI_Serial_Number",
                "Installed EI Type Equipment":"Installed_EI_Type_Equipment",
                "Installed EI WUC Narrative":"Installed_EI_WUC_Narrative",
                "Installed EI Work Unit Code":"Installed_EI_Work_Unit_Code",
                "Installed Equipment Designator":"Installed_Equipment_Designator",
                "Installed Location Identifier":"Installed_Location_Identifier",
                "Installed Lot Number":"Installed_Lot_Number",
                "Installed Prev Operating Time":"Installed_Prev_Operating_Time",
                "Installed Serial Number":"Installed_Serial_Number",
                "Installed Type Equipment":"Installed_Type_Equipment",
                "Installed WUC Narrative":"Installed_WUC_Narrative",
                "Installed Work Unit Code":"Installed_Work_Unit_Code",
                "Job Control Number":"Job_Control_Number",
                "Labor Manhours":"Labor_Manhours",
                "Maintainer Name":"Maintainer_Name",
                "Maintenance Priority":"Maintenance_Priority",
                "On Base Turn In Doc Number":"On_Base_Turn_In_Doc_Number",
                "On Equip Sequence Number":"On_Equip_Sequence_Number",
                "On Equip Work Center Event Id":"On_Equip_Work_Center_Event_Id",
                "Organization":"Organization",
                "Performing Geographic Location":"Performing_Geographic_Location",
                "Posting Date":"Posting_Date",
                "Record Type":"Record_Type",
                "Removed CAGE Code":"Removed_CAGE_Code",
                "Removed Current Operating Time":"Removed_Current_Operating_Time",
                "Removed Equipment Designator":"Removed_Equipment_Designator",
                "Removed Location Identifier":"Removed_Location_Identifier",
                "Removed Lot Number":"Removed_Lot_Number",
                "Removed Prev Operating Time":"Removed_Prev_Operating_Time",
                "Removed Serial Number":"Removed_Serial_Number",
                "Removed Type Equipment":"Removed_Type_Equipment",
                "Removed WUC Narrative":"Removed_WUC_Narrative",
                "Removed Work Unit Code":"Removed_Work_Unit_Code",
                "Sequence Number":"Sequence_Number",
                "Serial Number":"Serial_Number",
                "Standard Reporting Designator":"Standard_Reporting_Designator",
                "Start Time":"Start_Time",
                "Stop Time":"Stop_Time",
                "TCTO Data Code":"TCTO_Data_Code",
                "Transaction Date":"Transaction_Date",
                "Type Equipment":"Type_Equipment",
                "Type Maintenance Code":"Type_Maintenance_Code",
                "Units":"Units",
                "WUC Narrative":"WUC_Narrative",
                "When Discovered Code":"When_Discovered_Code",
                "Work Center Code":"Work_Center_Code",
                "Work Center Event Identifier":"Work_Center_Event_Identifier",
                "Work Center Event Narrative":"Work_Center_Event_Narrative",
                "Work Order Number":"Work_Order_Number",
                "Work Unit Code":"Work_Unit_Code"
            },
            "date_formatter":{
                "Posting_Date":"%M %d %Y",
                "Transaction_Date":"%M %d, %Y"
            },
            "delimiter":"comma"
        },
        "class":"CSV",
        "custom_model":true,
        "description":"Import PRP4127 REMIS data.",
        "id":"prp4127",
        "label":"PRP4127",
        "model":"0cb4b55f-6b15-4bc6-abd0-8d6b2a2159dc",
        "position":[
            40,
            10
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT DISTINCT File_Name FROM compiled_remis_data"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"data_files",
        "label":"Data Files",
        "model":"0bf5e4e4-6354-4290-9747-7355bda0fe99",
        "position":[
            50,
            675
        ]
    },
    {
        "class":"CSV",
        "custom_model":true,
        "description":"Import data that is contained in a delimited text file.",
        "id":"unlabeled_import",
        "label":"Unlabeled Import",
        "model":"aec9778f-6c13-4c29-9928-feed17932376",
        "position":[
            55,
            1035
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT File_Name, remis.On_Maint_Action_Key, remis.Work_Center_Event_Identifier, remis.Sequence_Number, remis.Off_Maint_Action_Key, remis.Work_Order_Number, remis.Depot_Maint_Action_Key, Equipment_Designator, Serial_Number, Job_Control_Number, remis.Work_Unit_Code, Transaction_Date, Geographic_Location, remis.Current_Operating_Time, Action_Taken_Code, at.description, How_Malfunction_Code, How_Malfunction_Class_Ind, hmal.description, Type_Maintenance_Code, tm.description, When_Discovered_Code, wd.description, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM  unlabeled_import remis LEFT JOIN at_codes at ON at.code = remis.Action_Taken_Code LEFT JOIN hmal_codes hmal ON hmal.code = remis.How_Malfunction_Code LEFT JOIN wd_codes wd ON wd.code = remis.When_Discovered_Code LEFT JOIN tm_codes tm ON tm.code = remis.Type_Maintenance_Code WHERE Serial_Number IS NOT NULL AND TRIM(Equipment_Designator) IN ('C130J','C130H')",
                "SELECT NULL , NULL , remis.Work_Center_Event_Identifier, remis.Sequence_Number, NULL , NULL , NULL , Equipment_Designator, Serial_Number, Job_Control_Number, remis.Work_Unit_Code, Transaction_Date, Geographic_Location, remis.Current_Operating_Time, Action_Taken_Code, at.description, How_Malfunction_Code, How_Malfunction_Class_Ind, hmal.description, Type_Maintenance_Code, tm.description, When_Discovered_Code, wd.description, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM  unlabeled_import_no_key remis  LEFT JOIN at_codes at     ON at.code = remis.Action_Taken_Code LEFT JOIN hmal_codes hmal     ON hmal.code = remis.How_Malfunction_Code LEFT JOIN wd_codes wd     ON wd.code = remis.When_Discovered_Code LEFT JOIN tm_codes tm     ON tm.code = remis.Type_Maintenance_Code WHERE Serial_Number IS NOT NULL AND TRIM(Equipment_Designator) IN ('C130H','C130J')"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Include codes and narratives to assist with labeling excercises.  Minimal key information for the 4127 report.",
        "id":"unlabeled_data_desc",
        "label":"Unlabeled Data Desc",
        "model":"923d6d84-4f90-4a58-b20d-14cb8c91238d",
        "position":[
            190,
            1035
        ]
    },
    {
        "attrs":{
            "timeout":60
        },
        "class":"Python",
        "custom_model":true,
        "description":"Forecast near-term per-aircraft operating tempo.",
        "id":"opstempo_forecast",
        "label":"OpsTempo Forecast",
        "model":"2c4d1493-09dc-4fc5-81b1-c75e5eb5fff7",
        "position":[
            515,
            360
        ]
    },
    {
        "attrs":{
            "column_conversion":{
                "Assigned Geographic Location Name":"x.strip()",
                "Assigned Organization":"x.strip()",
                "Mission Design Series (e.g. F-16C)":"x.strip()",
                "Serial Number":"x.strip()"
            },
            "data_start_column":2,
            "data_start_row":5,
            "label_start_row":4
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import Assigned Location Data.",
        "id":"assigned_location",
        "label":"Assigned Location",
        "model":"ed79df86-5773-47d6-8108-29f3a0df8fa1",
        "position":[
            50,
            285
        ]
    },
    {
        "class":"CSV",
        "custom_model":true,
        "description":"Import data that is contained in a delimited text file.",
        "id":"unlabeled_import_no_key",
        "label":"Unlabeled Import No Key",
        "model":"c71a9dcb-0dc5-4ff2-92e6-fcdd3b289784",
        "position":[
            55,
            1070
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"unlabeled_export",
        "label":"Unlabeled Export",
        "position":[
            335,
            1070
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT File_Name, remis.On_Maint_Action_Key, remis.Work_Center_Event_Identifier, remis.Sequence_Number, remis.Off_Maint_Action_Key, remis.Work_Order_Number, remis.Depot_Maint_Action_Key, Equipment_Designator, Serial_Number, Job_Control_Number, remis.Work_Unit_Code, Transaction_Date, Geographic_Location, remis.Current_Operating_Time, Action_Taken_Code, at.description, How_Malfunction_Code, How_Malfunction_Class_Ind, hmal.description, Type_Maintenance_Code, tm.description, When_Discovered_Code, wd.description, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM (SELECT DISTINCT work_unit_code FROM ercm_wuc_list) ercm_wuc_list JOIN compiled_remis_data remis ON remis.Work_Unit_Code = ercm_wuc_list.Work_Unit_Code JOIN at_codes at ON at.code = remis.Action_Taken_Code JOIN hmal_codes hmal ON hmal.code = remis.How_Malfunction_Code JOIN wd_codes wd ON wd.code = remis.When_Discovered_Code JOIN tm_codes tm ON tm.code = remis.Type_Maintenance_Code WHERE TRIM(Equipment_Designator) IN ('C130H','C130J')",
                "SELECT NULL , NULL , remis.Work_Center_Event_Identifier, remis.Sequence_Number, NULL , NULL , NULL , Equipment_Designator, Serial_Number, Job_Control_Number, remis.Work_Unit_Code, Transaction_Date, Geographic_Location, remis.Current_Operating_Time, Action_Taken_Code, at.description, How_Malfunction_Code, How_Malfunction_Class_Ind, hmal.description, Type_Maintenance_Code, tm.description, When_Discovered_Code, wd.description, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Action_Narrative FROM (SELECT DISTINCT work_unit_code FROM ercm_wuc_list) ercm_wuc_list JOIN prp4127 remis ON remis.Work_Unit_Code = ercm_wuc_list.Work_Unit_Code JOIN at_codes at ON at.code = remis.Action_Taken_Code JOIN hmal_codes hmal ON hmal.code = remis.How_Malfunction_Code JOIN wd_codes wd ON wd.code = remis.When_Discovered_Code JOIN tm_codes tm ON tm.code = remis.Type_Maintenance_Code WHERE TRIM(Equipment_Designator) IN ('C130H','C130J')"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Include codes and narratives to assist with labeling excercises.  Minimal key information for the 4127 report.",
        "id":"unlabeled_data_desc_no_key",
        "label":"Unlabeled Data Desc No Key",
        "model":"80619abb-122d-4d53-b951-03e6f6a6e314",
        "position":[
            190,
            1070
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_41322",
        "label":"Fit Action 41322",
        "model":"deeplearningclassifier",
        "position":[
            670,
            445
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "custom_predecessor":true,
                "display_text_column":"Corrective_Narrative",
                "group_by_column":"Model_Name"
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Display Removal ID metrics for WUC Subsystem 413xx.",
        "id":"action_metrics_413xx",
        "label":"Action Metrics 413xx",
        "model":"1b677858-184f-461e-8861-106feb3749df",
        "position":[
            790,
            560
        ]
    },
    {
        "attrs":{
            "copy_only_key_columns":true
        },
        "class":"DeepLearningLabeler",
        "custom_model":true,
        "description":"Apply a deep learning model to a new set of data",
        "id":"label_41322_action",
        "label":"Label 41322 Action",
        "model":"4e8627d3-d22e-42ee-b7e8-af4dcd9e276c",
        "position":[
            960,
            440
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"sort_rules_list",
        "label":"Sort Rules List",
        "model":"3e60b7dd-586d-4665-a6ad-baec666d3886",
        "position":[
            145,
            215
        ]
    },
    {
        "class":"CSV",
        "custom_model":true,
        "description":"Import Clockwork-generated file providing more detail on quantity-per-aricraft for part position parser, lost position finder, and current part ages.",
        "id":"wuc_list_qpa",
        "label":"WUC List QPA",
        "model":"58321884-e4f0-4838-bd78-0866a67fc9f5",
        "position":[
            55,
            175
        ]
    },
    {
        "attrs":{
            "data_start_row":10,
            "label_start_row":9,
            "save_file_name":"File_Name"
        },
        "class":"Excel",
        "custom_model":true,
        "description":"Import an Excel file with list of aircraft at depot and when they are due out.",
        "id":"aircraft_in_depot",
        "label":"Aircraft In Depot",
        "model":"8b40ceda-defa-445e-9cc7-484fb6e491db",
        "position":[
            50,
            720
        ]
    },
    {
        "attrs":{
            "column_mapping":{
                "Assigned Base":"Assigned_Base",
                "MDS":"Equipment_Designator",
                "Serial Number":"Serial_Number"
            }
        },
        "class":"CSV",
        "custom_model":true,
        "description":"Import data that is contained in a delimited text file.",
        "id":"asgn_loc_snapshot",
        "label":"Asgn Loc Snapshot",
        "model":"d9bbf9f1-6d35-41e1-8822-ceb412f5d722",
        "position":[
            50,
            755
        ]
    },
    {
        "class":"Python",
        "description":"Plot causal events and MLE fit.",
        "id":"weibull_plots",
        "label":"Weibull Plots",
        "position":[
            1820,
            215
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT tow.id, tow.TOW, IFNULL(tow.REMOVAL_Cause, 'Unknown'), i.causal Causal, tow.Removed_Last_5_Years, tow.Removed_Last_10_Years FROM remove_disqualified_add_covariates tow JOIN `interval` i ON i.source_id = tow.id WHERE TOW > 0.1"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Select data for interval plots. Treat isolations as causal so they show up in the plots, even though they're treated as suspensions for Weibull calculations.",
        "id":"interval_data_for_plots",
        "label":"Interval Data for Plots",
        "model":"fbbb408f-39cd-4d71-8b81-966bdccdc323",
        "position":[
            1255,
            295
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "causal_only":1,
                "removal_cause_column":"REMOVAL_Cause",
                "user_bucket_num":8
            },
            "timeout":15
        },
        "class":"Python",
        "description":"Run a python script resulting in Bokeh visualizations of TOW Intervals by Removal Cause.",
        "id":"interval_plots",
        "label":"Interval Plots",
        "position":[
            1395,
            295
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "Y":0.15,
                "max_range":0.3
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Test if the height of confidence interval around weibull curve (measured in unreliability, 0 to 1) is too great.  Accepts two parameters, Y: the test is performed by measuring CI height at two estimated quantiles: Y and 1-Y (e.g. 0.15 and 0.85) max_range: the maximum allowable height of the CI at either Y or 1-Y.",
        "id":"range_check",
        "label":"Range Check",
        "model":"f665edbe-3c19-49af-bdda-1ac3dfd9b20a",
        "position":[
            1470,
            360
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "Quantile_Cutoff":0,
                "X":75
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"domain_check",
        "label":"Domain Check",
        "model":"4f7fde47-fb01-41e4-9d8a-0410d4d7b5cb",
        "position":[
            1470,
            395
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Calculate 90-day flying hour horizons.",
        "id":"three_month_fh_collector",
        "label":"Three Month FH Collector",
        "model":"0af2ac86-c3b3-4cba-87c0-30dae459afa1",
        "position":[
            515,
            320
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Maintain a copy of all previously-generated predictive twins - one for each forecast month.",
        "id":"opstempo_archive",
        "label":"Opstempo Archive",
        "model":"e2fcb1cc-093b-4d97-84f8-95d46c12a999",
        "position":[
            660,
            340
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT now() fit_date, (SELECT DATE_FORMAT(DATE_ADD(MAX(REMOVAL_Transaction_Date), INTERVAL 1 MONTH), '%Y-%m-01') start_forecast_date from calculate_tow) forecast_start_date, rd.id distribution_id, rd.interval_parameter_set_id, IFNULL(GROUP_CONCAT(DISTINCT class.name  SEPARATOR ' '),  'Any WUC') WUC, IFNULL(GROUP_CONCAT(DISTINCT nha_pn.name  SEPARATOR ' '),  'Any MDS') MDS, IFNULL(GROUP_CONCAT(DISTINCT time_frame.name  SEPARATOR ' '),  'Since 04') TIME_FRAME, rd.distribution_mean, rd.causal_events, rd.censored_events, rd.log_likelihood, rd.anderson_darling_adj, rd.ks_stat, rd.beta_eq_one_pval, dt.name dist_name, rdp.pv1 eta, rdp.se1 eta_se, COALESCE(rdp.pv2, 1) beta, rdp.se2 beta_se FROM reliability_distribution rd LEFT JOIN (SELECT ips.id ips_id, pv.value name FROM interval_parameter_set ips JOIN interval_parameter_set_map ipsm ON ipsm.interval_parameter_set_id = ips.id JOIN parameter_value pv ON pv.id = ipsm.parameter_value_id JOIN parameter p ON p.id = pv.parameter_id WHERE p.name = 'object_class') class ON class.ips_id = rd.interval_parameter_set_id LEFT JOIN (SELECT ips.id ips_id, pv.value name FROM interval_parameter_set ips JOIN interval_parameter_set_map ipsm ON ipsm.interval_parameter_set_id = ips.id JOIN parameter_value pv ON pv.id = ipsm.parameter_value_id JOIN parameter p ON p.id = pv.parameter_id WHERE p.name = 'parent_object_type') nha_pn ON nha_pn.ips_id = rd.interval_parameter_set_id LEFT JOIN (SELECT ips.id ips_id, p.name FROM interval_parameter_set ips JOIN interval_parameter_set_map ipsm ON ipsm.interval_parameter_set_id = ips.id JOIN parameter_value pv ON pv.id = ipsm.parameter_value_id JOIN parameter p ON p.id = pv.parameter_id WHERE p.name in ('Removed_Last_5_Years', 'Removed_Last_10_Years') AND pv.value = 1) time_frame ON time_frame.ips_id = rd.interval_parameter_set_id LEFT JOIN distribution_type dt ON dt.id = rd.distribution_type_id LEFT JOIN (SELECT rdp1.reliability_distribution_id,  rdp1.parameter_value pv1,  rdp1.standard_error se1,  rdp2.parameter_value pv2,  rdp2.standard_error se2 FROM (SELECT  reliability_distribution_id, parameter_value, standard_error  FROM  reliability_distribution_parameter rdp  JOIN distribution_type_parameter dtp ON dtp.id = rdp.distribution_type_parameter_id  WHERE  dtp.parameter_number = 1) rdp1  LEFT JOIN (SELECT  reliability_distribution_id, parameter_value, standard_error  FROM  reliability_distribution_parameter rdp  JOIN distribution_type_parameter dtp ON dtp.id = rdp.distribution_type_parameter_id  WHERE  dtp.parameter_number = 2) rdp2 ON rdp1.reliability_distribution_id = rdp2.reliability_distribution_id) rdp ON rdp.reliability_distribution_id = rd.id WHERE  dt.name IS NOT NULL  AND rd.interval_parameter_set_id NOT IN (  SELECT  ips.id ips_id  FROM  interval_parameter_set ips  JOIN interval_parameter_set_map ipsm ON ipsm.interval_parameter_set_id = ips.id  JOIN parameter_value pv ON pv.id = ipsm.parameter_value_id  JOIN parameter p ON p.id = pv.parameter_id  WHERE  p.name in ('Removed_Last_5_Years', 'Removed_Last_10_Years') GROUP BY ips.id HAVING sum(pv.value) <> 1 OR count(pv.value) > 1) GROUP BY rd.id, interval_parameter_set_id , dt.name, rdp.pv1, rdp.se1, rdp.pv2, rdp.se2"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Convert distributions into a flat table and filter out unwanted distributions.",
        "id":"denormalize_distributions",
        "label":"Denormalize Distributions",
        "model":"cc1e1d81-b31c-4983-ba14-74ed4dc628f2",
        "position":[
            1395,
            225
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Maintain a copy of all previously-generated predictive twins.",
        "id":"predictive_twins_archive",
        "label":"Predictive Twins Archive",
        "model":"006ddcd6-29e1-4cac-b69f-758c0f5ec4e8",
        "position":[
            1855,
            125
        ]
    },
    {
        "class":"Stager",
        "custom_model":true,
        "description":"Maintain a copy of all previously-generated predictive twins.",
        "id":"weibull_archive",
        "label":"Weibull Archive",
        "model":"51b4aa7d-b057-452c-8535-1060961e0f0c",
        "position":[
            1820,
            295
        ]
    },
    {
        "class":"DataExporter",
        "description":"Export all or a subset of rows contained in a table.",
        "id":"export_weibulls",
        "label":"Export Weibulls",
        "position":[
            1820,
            330
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "preferred_distributions":[]
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Identify distributions worth using.",
        "id":"classify_distributions",
        "label":"Classify Distributions",
        "model":"db457bf6-a372-4078-b2bd-f3c2a0c77f92",
        "position":[
            1630,
            225
        ]
    },
    {
        "class":"SQL",
        "custom_model":true,
        "description":"Placeholder component with model including all the necessary columns for labels import EventLabelGenerators.",
        "id":"labels_model",
        "label":"Labels Model",
        "model":"5fb3e5bc-454c-48d6-bfe0-31844d117f27",
        "position":[
            230,
            445
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "col_filter_value":{
                    "Work_Unit_Code":[
                        "526DD",
                        "526DA",
                        "526DE"
                    ]
                },
                "label_name":"Action",
                "min_minority_fraction_of_most_common":0.33,
                "test_ratio":0.25
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_526dx",
        "label":"Resample 526DX",
        "model":"5d3dceef-c3bf-42c3-8550-f0f891a68b82",
        "position":[
            230,
            760
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_526dx",
        "label":"Fit Action 526DX",
        "model":"deeplearningclassifier",
        "position":[
            365,
            760
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction,'True','False') as matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_526dx) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_526dx%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Condese labeled data to original size for metric calculation.",
        "id":"add_label_add_split_526da",
        "label":"Add Label Add Split 526DA",
        "model":"d505d98d-c6e7-46fc-918e-33251f374bab",
        "position":[
            700,
            760
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "custom_predecessor":true
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Display metrics for 8-class ATC model.",
        "id":"action_metrics_526dx",
        "label":"Action Metrics 526DX",
        "model":"15c43923-ad28-411d-bf02-d756bcf004fe",
        "position":[
            840,
            760
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_82lc0",
        "label":"Fit Action 82LC0",
        "model":"deeplearningclassifier",
        "position":[
            365,
            800
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "label_name":"Action",
                "max_majority_fraction_of_next_highest":1.6,
                "min_minority_fraction_of_most_common":0.15,
                "test_ratio":0.25,
                "col_filter_value": "82LC0"
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_82lc0",
        "label":"Resample 82LC0",
        "model":"a1c1ff09-c4b0-409a-afbe-a2e44a8a2973",
        "position":[
            230,
            800
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'HDD_82LC0' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction,'True','False') as matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_82lc0) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_82L%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'Starter_22xAA' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_starter) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_starter%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'ICS_64BAD' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_64bad) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_64bad%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'FADEC_22RBC' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_22rbc) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_22rbc%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'HydPump_453AS' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_453as) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_453as%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Condese labeled data to original size for metric calculation.",
        "id":"add_label_add_split_b",
        "label":"Add Label Add Split B",
        "model":"38def964-1f66-4951-8282-2569479f64a8",
        "position":[
            700,
            800
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "custom_predecessor":true,
                "display_text_column":"Corrective_Narrative",
                "group_by_column":"Model_Name"
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Display metrics for 8-class ATC model.",
        "id":"action_metrics_b",
        "label":"Action Metrics B",
        "model":"e4577e83-b038-496d-9420-aeab5c3bfab2",
        "position":[
            840,
            800
        ]
    },
    {
        "attrs":{
            "copy_only_key_columns":true
        },
        "class":"DeepLearningLabeler",
        "custom_model":true,
        "description":"Apply a deep learning model to a new set of data",
        "id":"label_82lc0_action",
        "label":"Label 82LC0 Action",
        "model":"16e116fa-98d5-42ba-b66b-478ac584c998",
        "position":[
            1130,
            800
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT remis.Work_Order_Number, remis.Work_Center_Event_Identifier, remis.Sequence_Number, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM compiled_remis_data remis JOIN wuc_of_interest wucs ON wucs.Work_Order_Number = remis.Work_Order_Number AND wucs.Work_Center_Event_Identifier = remis.Work_Center_Event_Identifier AND wucs.Sequence_Number = remis.Sequence_Number WHERE remis.Serial_Number IS NOT NULL AND TRIM(remis.Equipment_Designator) IN ('C130J','C130H') AND wucs.Work_Unit_Code = '82LC0'"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Filter by WUC and Year, exclude NULL Serial Number, get narratives to for labeling.",
        "id":"remis_filter_82lc0",
        "label":"REMIS Filter 82LC0",
        "model":"ac3772c8-07bb-47cb-a8a8-14bbb684f477",
        "position":[
            985,
            800
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT * FROM label_atc",
                "SELECT * FROM label_82lc0_action"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"labels_joined",
        "label":"Labels Joined",
        "model":"5c883d98-6201-49e6-9f07-ccbc136cec70",
        "position":[
            640,
            80
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
  "class_swaps": {
    "P": "R",
    "Q": "R",
    "T": "TU",
    "U": "TU"
  },
  "label_name": "Action",
  "max_majority_fraction_of_next_highest": 2.2,
  "min_minority_fraction_of_most_common": 0.15,
  "test_ratio": 0.25,
  "col_filter_value": {"Work_Unit_Code": "22RBC"}
}
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_22rbc",
        "label":"Resample 22RBC",
        "model":"c4e223b6-defc-48dc-8421-2ed369d65a1b",
        "position":[
            230,
            835
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_22rbc",
        "label":"Fit Action 22RBC",
        "model":"deeplearningclassifier",
        "position":[
            365,
            835
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "label_name":"Action",
                "max_majority_fraction_of_next_highest":1.6,
                "min_minority_fraction_of_most_common":0.15,
                "test_ratio":0.25,
  "col_filter_value": {
    "Work_Unit_Code": 
      "64BAD"
  }
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_64bad",
        "label":"Resample 64BAD",
        "model":"62631d2a-870f-4fbe-914d-34529f335bfe",
        "position":[
            230,
            875
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
  "class_swaps": {
    "P": "R",
    "Q": "R",
    "T": "TU",
    "U": "TU"
  },
  "label_name": "Action",
  "max_majority_fraction_of_next_highest": 2.2,
  "min_minority_fraction_of_most_common": 0.15,
  "test_ratio": 0.25,
  "col_filter_value": {
    "Work_Unit_Code": [
      "22YAA",
      "22FAA"
    ]
  }
}
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_starter",
        "label":"Resample Starter",
        "model":"157d7487-ee73-4d34-bc74-508021adf892",
        "position":[
            230,
            910
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_starter",
        "label":"Fit Action Starter",
        "model":"deeplearningclassifier",
        "position":[
            365,
            910
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_64bad",
        "label":"Fit Action 64BAD",
        "model":"deeplearningclassifier",
        "position":[
            365,
            875
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction,'True','False') as matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_22rbc) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_22rbc%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Condese labeled data to original size for metric calculation.",
        "id":"add_label_add_split_a",
        "label":"Add Label Add Split A",
        "model":"8f7c8395-f921-4a3f-ad3b-bbee29f9fb3c",
        "position":[
            740,
            675
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'PrsSftVlv_41322' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction,'True','False') as matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_41322) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_41322%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'PrsCtrl_41311' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_41311) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_41311%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'PrsOflVlv_41321' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_41321) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_41321%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'PrsSftVlvFlt_41325' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_41325) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_41325%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target",
                "SELECT labels.Row_Number id, labels.Labels_File_Name, REMIS_File_Name, 'PrsOflVlvFlt_41315' as Model_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, labels.Discrepancy_Narrative, labels.Work_Center_Event_Narrative, labels.Corrective_Narrative, labels.train_test, labels.action label, pr.prediction, if(labels.action=pr.prediction, 'True','False') AS matches FROM (SELECT DISTINCT Row_Number, Labels_File_Name, REMIS_File_Name, Equipment_Designator, Serial_Number, Work_Unit_Code, Transaction_Date, Geographic_Location, Action_Taken_Code, action, train_test, Discrepancy_Narrative, Work_Center_Event_Narrative, Corrective_Narrative FROM resample_41315) labels JOIN (SELECT DISTINCT replace(target, 'None', '') target, prediction FROM deeplearningclassifier WHERE component_name LIKE '%action_41315%') pr ON concat(coalesce(labels.Discrepancy_Narrative, ''), ' ', coalesce(labels.Work_Center_Event_Narrative, ''), ' ', coalesce(labels.Corrective_Narrative, '')) = pr.target"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Rename columns to prep for comparison confusion matrix, add train/test split, and add predicted label.",
        "id":"add_label_add_split_413xx",
        "label":"Add Label Add Split 413XX",
        "model":"796644da-25d6-4b37-b691-0408e0c0aa75",
        "position":[
            645,
            560
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "col_filter_value":{
                    "Work_Unit_Code":"41325"
                },
                "label_name":"Action",
                "min_minority_fraction_of_most_common":0.33,
                "test_ratio":0.25
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_41325",
        "label":"Resample 41325",
        "model":"a9c44e99-927e-4020-b3e2-30c7fc600e75",
        "position":[
            230,
            610
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "col_filter_value":{
                    "Work_Unit_Code":"41321"
                },
                "label_name":"Action",
                "min_minority_fraction_of_most_common":0.33,
                "test_ratio":0.25
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_41321",
        "label":"Resample 41321",
        "model":"723c475d-a3eb-4092-b862-ffbb44a524e0",
        "position":[
            230,
            575
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "col_filter_value":{
                    "Work_Unit_Code":"41315"
                },
                "label_name":"Action",
                "max_majority_fraction_of_next_highest":1.6,
                "min_minority_fraction_of_most_common":0.15,
                "test_ratio":0.25
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_41315",
        "label":"Resample 41315",
        "model":"2b3ee52c-5182-4502-bd80-38c6485360d9",
        "position":[
            230,
            535
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "col_filter_value":{
                    "Work_Unit_Code":"41311"
                },
                "label_name":"Action",
                "max_majority_fraction_of_next_highest":1.6,
                "min_minority_fraction_of_most_common":0.15,
                "test_ratio":0.25
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_41311",
        "label":"Resample 41311",
        "model":"b34595f8-d7cf-4da6-9ab8-c2e720b6aa2c",
        "position":[
            230,
            500
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_41311",
        "label":"Fit Action 41311",
        "model":"deeplearningclassifier",
        "position":[
            370,
            500
        ]
    },
    {
        "class":"CSV",
        "custom_model":true,
        "description":"Import data that is contained in a delimited text file.",
        "id":"import_wuc_corrections",
        "label":"Import WUC Corrections",
        "model":"1d46ea89-152c-4664-ad42-612910cf9c6c",
        "position":[
            15,
            90
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_41315",
        "label":"Fit Action 41315",
        "model":"deeplearningclassifier",
        "position":[
            370,
            535
        ]
    },
    {
        "class":"Python",
        "custom_model":true,
        "description":"Run a python script.",
        "id":"dedupe_corrections",
        "label":"Dedupe Corrections",
        "model":"20456ff8-b53b-45e4-b8b7-ffcf7975f4a2",
        "position":[
            55,
            140
        ]
    },
    {
        "attrs":{
            "query_list":[
                "SELECT remis.Work_Order_Number, remis.Work_Center_Event_Identifier, remis.Sequence_Number, COALESCE(corr.Work_Unit_Code, remis.Work_Unit_Code) as Work_Unit_Code FROM compiled_remis_data remis LEFT JOIN dedupe_corrections corr ON remis.Work_Order_Number = corr.Work_Order_Number AND remis.Work_Center_Event_Identifier = corr.Work_Center_Event_Identifier AND remis.Sequence_Number = corr.Sequence_Number HAVING Work_Unit_Code IN (SELECT Work_Unit_Code FROM ercm_wuc_list)"
            ]
        },
        "class":"SQL",
        "custom_model":true,
        "description":"Run a set of SQL select queries on existing database tables.",
        "id":"wuc_of_interest",
        "label":"WUC of Interest",
        "model":"c47d9e93-c174-4f17-854c-b90a135289b0",
        "position":[
            215,
            100
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
                "class_swaps":{
                    "P":"R",
                    "Q":"R",
                    "T":"TU",
                    "U":"TU"
                },
                "label_name":"Action",
                "max_majority_fraction_of_next_highest":1.6,
                "min_minority_fraction_of_most_common":0.15,
                "test_ratio":0.25,
                "col_filter_value": {"Work_Unit_Code": "41322"}
            }
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_41322",
        "label":"Resample 41322",
        "model":"66b0de83-2fdd-4260-b6b9-fe936efe6566",
        "position":[
            515,
            445
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_41321",
        "label":"Fit Action 41321",
        "model":"deeplearningclassifier",
        "position":[
            370,
            575
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_41325",
        "label":"Fit Action 41325",
        "model":"deeplearningclassifier",
        "position":[
            370,
            610
        ]
    },
    {
        "attrs":{
            "additional_parameters":{
  "class_swaps": {
    "P": "R",
    "Q": "R",
    "T": "TU",
    "U": "TU"
  },
  "label_name": "Action",
  "max_majority_fraction_of_next_highest": 2.2,
  "min_minority_fraction_of_most_common": 0.15,
  "test_ratio": 0.25,
  "col_filter_value": {
    "Work_Unit_Code": "453AS"
  }
}
        },
        "class":"Python",
        "custom_model":true,
        "description":"Randomly sample from minority classes (those fewer records than the most-common class) to get an even quantity of labeled data per class for training a model.",
        "id":"resample_453as",
        "label":"Resample 453AS",
        "model":"3a8ec2ca-dc64-4d9c-811d-77bb49301843",
        "position":[
            230,
            945
        ]
    },
    {
        "attrs":{
            "label":"Action",
            "number_epochs":50,
            "target_columns":[
                "Discrepancy_Narrative",
                "Work_Center_Event_Narrative",
                "Corrective_Narrative"
            ]
        },
        "class":"DeepLearningClassifier",
        "custom_model":true,
        "description":"Uses a stacked deep learning method to train a model for classifying text.",
        "id":"fit_action_453as",
        "label":"Fit Action 453AS",
        "model":"deeplearningclassifier",
        "position":[
            365,
            945
        ]
    }
]